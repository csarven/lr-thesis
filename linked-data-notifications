<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <title>Linked Data Notifications</title>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="media/css/basic.css" media="all" rel="stylesheet" title="Basic" />
    <link href="media/css/thesis.css" media="all" rel="stylesheet alternate" title="Thesis" />
    <link href="media/css/lncs.css" media="all" rel="stylesheet alternate" title="LNCS" />
    <link href="media/css/acm.css" media="all" rel="stylesheet alternate" title="ACM" />
    <link href="media/css/dokieli.css" media="all" rel="stylesheet" />
    <script src="scripts/dokieli.js"></script>
  </head>

  <body about="" prefix="rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs: http://www.w3.org/2000/01/rdf-schema# owl: http://www.w3.org/2002/07/owl# xsd: http://www.w3.org/2001/XMLSchema# dcterms: http://purl.org/dc/terms/ dctypes: http://purl.org/dc/dcmitype/ foaf: http://xmlns.com/foaf/0.1/ pimspace: http://www.w3.org/ns/pim/space# cc: https://creativecommons.org/ns# skos: http://www.w3.org/2004/02/skos/core# prov: http://www.w3.org/ns/prov# mem: http://mementoweb.org/ns# qb: http://purl.org/linked-data/cube# earl: http://www.w3.org/ns/earl# schema: http://schema.org/ void: http://rdfs.org/ns/void# rsa: http://www.w3.org/ns/auth/rsa# cert: http://www.w3.org/ns/auth/cert# wgs: http://www.w3.org/2003/01/geo/wgs84_pos# bibo: http://purl.org/ontology/bibo/ sioc: http://rdfs.org/sioc/ns# doap: http://usefulinc.com/ns/doap# dbr: http://dbpedia.org/resource/ dbp: http://dbpedia.org/property/ sio: http://semanticscience.org/resource/ opmw: http://www.opmw.org/ontology/ deo: http://purl.org/spar/deo/ doco: http://purl.org/spar/doco/ cito: http://purl.org/spar/cito/ fabio: http://purl.org/spar/fabio/ oa: http://www.w3.org/ns/oa# as: https://www.w3.org/ns/activitystreams# ldp: http://www.w3.org/ns/ldp# solid: http://www.w3.org/ns/solid/terms# acl: http://www.w3.org/ns/auth/acl# dio: https://w3id.org/dio# rel: https://www.w3.org/ns/iana/link-relations/relation#" typeof="schema:CreativeWork sioc:Post prov:Entity">
    <main>
      <article about="" typeof="schema:ScholarlyArticle">
        <h1 property="schema:name">Linked Data Notifications</h1>
        <dl id="document-modified">
          <dt>Modified</dt>
          <dd><time content="2018-11-29T20:50:23.432Z" datatype="xsd:dateTime" datetime="2018-11-29T20:50:23.432Z" property="schema:dateModified">2018-11-29</time></dd>
        </dl>

        <div datatype="rdf:HTML" property="schema:description">
          <blockquote cite="http://www.chakoteya.net/Voyager/613.htm">
            <dl>
              <dt>JANEWAY</dt><dd>To be honest, we're having a little trouble understanding your technology.</dd>
              <dt>ABARCA</dt><dd>The problem is your technology. Interference from your antiquated scanning devices shut down our propulsion system.</dd>
              <dt>TINCOO</dt><dd>Forgive us, Captain. We live in a closed system. We are not accustomed to interacting with other species, especially inferior ones.</dd>
              <dt>JANEWAY</dt><dd>Well then, I guess we'll leave the repairs in your superior hands.</dd>
            </dl>
            <footer><cite><a data-versiondate="2018-09-12T07:20:21Z" data-versionurl="https://web.archive.org/web/20180912072021/http://www.chakoteya.net/Voyager/613.htm" href="http://www.chakoteya.net/Voyager/613.htm">Virtuoso</a>, Star Trek: Voyager</cite>, 2000</footer>
          </blockquote>

          <p>Parts of this section are adapted from work published as <cite><a href="http://csarven.ca/linked-data-notifications" rel="prov:wasDerivedFrom">Linked Data Notifications: a resource-centric communication protocol</a></cite>, Capadisli et al (2017), <a href="http://2017.eswc-conferences.org/">Extended Semantic Web Conference</a>, (Best Student Paper Award). Additionally some parts are adapted from <cite><a href="http://csarven.ca/linked-specifications-reports" rel="prov:wasDerivedFrom">Linked Specifications, Test Suites, and Implementation Reports</a></cite>, Capadisli (2018), TheWebConf Developers Track. Finally, parts of the W3C Recommendation <cite><a href="https://www.w3.org/TR/ldn/" rel="prov:wasDerivedFrom">Linked Data Notifications</a></cite>, editors Capadisli and Guy, 2017, have been integrated as well.</p>

          <section id="fulling-the-awareness-function" inlist="" rel="schema:hasPart" resource="#fulling-the-awareness-function">
            <h2 property="schema:name">Fulfilling the Awareness Function</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>As scholarly content is created and registered, becoming globally identifiable on the Web, the next challenge is to ensure it is <em>findable</em> within a decentralised system.</p>
              <p>The <a href="decentralising-scholarly-communication">previous chapter</a> reviews a number of Web standards and specifications pertaining to <a href="decentralising-scholarly-communication#read-write-linked-data">read-write Linked Data</a>, vocabularies about <a href="structure-of-scholarly-information#publishing-and-referencing">publishing resources</a> and <a href="structure-of-scholarly-information#participation">social participation</a>, and explains how they can be combined in various ways to realise a wide array of scholarly and social activities in a decentralised fashion. One of the ways that actors can directly help their content to be findable is by announcing its existence and location to interested parties. Generally, content discovery can be accomplished through agreed communication protocols. For example, the <cite><a href="https://tools.ietf.org/html/rfc5322">Internet Message Format</a></cite> (<abbr title="Internet Message Format">RFC 5322</abbr>) specifies message structure and delivery to electronic mailboxes, and recipients can read the messages from their mailboxes. This is a decentralised system in that there is no single authority for all of the mailboxes, and anyone can control their own mailbox. This section describes the design and standardisation of a decentralised notification system that works on the HTTP application layer.</p>

              <p>Notifications are sent over the Web for a variety of purposes, including social applications: <q>You have been invited to a vegan lunch!</q>, <q>Guinan annotated your article</q>, <q>Eunice tagged you in a photo</q>. The notification data may be displayed to a human to acknowledge, or used to trigger some other application-specific process (or both). Such notifications are also useful as part of a decentralised scholarly communications ecosystem, primarily for fulfilling the <em>awareness</em> function.</p>

              <p>Notifications are a common part of many centralised Web applications, and a well known use case is social network sites. In this case, notifications are structured arbitrarily and are typically only usable by the sanctioned applications or those that generated them in the first place. So far, notifications are <em>ephemeral</em> resources which may disappear after delivery, and thus are not designed for reuse. In such systems, communication and semantic interoperability across independently built applications is not expected. This design however places limitations on possible interactions around a notification. For example, current major social media services on the Web act as disjoint closed ecosystems, commonly known as "<a href="https://en.wikipedia.org/wiki/Closed_platform">walled gardens</a>" in contrast to open platforms with more possibilities for extensibility and reuse of applications and content. In essence, notification data is locked into particular systems, and users are restricted to using tightly coupled applications. Such software and systems are only capable of exchanging notifications if they have prior knowledge about the actors involved, location of the data, data formats, and user interfaces. Customarily, switching applications entails switching social providers, and having to create new profiles, and yet again reconnect or build one's social network in the new system from scratch. This scenario is analogous to using an email application that's customised to each service provider, and only being able to send and receive emails from people that use the same provider. In order for information to flow between systems customised communication interfaces or APIs need to be created after the fact, thus imposing additional maintenance tax for systems to cooperate.</p>

              <p>In a decentralised architecture, notifications can be a key element for federation of information, and application integration. Current efforts towards <em>re-decentralising</em> the Web are moving towards architectures in which data storage is decoupled from application logic, freeing end users to switch between applications, or to let multiple applications operate over the same data.</p>

              <p>Similarly for a decentralised scholarly Web, notification data should not be locked into particular systems. Data generated from independently built applications should be discoverable and increase their chance for reusability by other applications. Users can choose where to store their notifications as well as using their preferred applications to create, discover, and consume the data.</p>

              <p>The following are core requirements of a notifications protocol, in context of <a href="decentralising-scholarly-communication#degree-of-control">degree of control</a> (as previously discussed in <cite>Decentralised Storage and Interoperable Applications</cite> section):</p>

              <ul>
                <li>Actors can use their preferred applications to discover, reuse, and send notifications.</li>
                <li>Users store incoming notifications where they prefer.</li>
                <li>Users switching between applications without having to move their data.</li>
                <li>Users change the location of their data without having to change their application.</li>
              </ul>

              <p>In the following subsections I review existing decentralised protocols for notifications, and then outline use cases for notifications in scholarly communication. These use cases yield key design considerations, which are taken into account for the design of a new protocol - Linked Data Notifications (LDN) - which can be implemented to meet the awareness function for scholarly communication in decentralised systems, as well as meet the degree of control requirements listed above. LDN also supports systems with respect to the registration, certification and archiving functions.</p>

              <p>I developed LDN and served as the specification editor as part of the W3C Social Web Working Group, and LDN became a W3C Recommendation in May 2017. This section outlines key features and discusses design decisions made in the context of scholarly communications; for reference the specification in its entirety can be found at <a href="https://www.w3.org/TR/ldn/">https://www.w3.org/TR/ldn/</a><span class="todo"> [and in Appendix x]</span>.</p>
                
            </div>
          </section>

          <section id="overview-of-web-notification-systems" inlist="" rel="schema:hasPart" resource="#overview-of-web-notification-systems" typeof="deo:RelatedWork">
            <h2 property="schema:name">Overview of Web Notification Systems</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>Many systems which make use of notifications operate either in a completely centralised way, or are decentralised only in the sense that different instances of the <em>same</em> codebase need to interoperate; this review is restricted to mechanisms which do not expect the notification to be received or used only by the same software or platform which sent it.</p>

              <p>Existing decentralised notification mechanisms can be grouped according to the notification contents. Notification contents are either: 1) One or more URLs, indicating relations between Web resources (aka a ‘thin ping’), or 2) a ‘fat ping’ containing a blob of information. Semantic Pingback, Webmention, and Provenance Pingback follow the first form, and are also known as <cite>linkbacks</cite>, the suite of protocols that essentially allows Web documents to automatically reciprocate hyperlinks. This has the advantage that a verification mechanism can be tightly specified (the URL of the target must appear in the content of the source), but the disadvantage that notifications are only available for use cases involving Web publishing. Fat pings, in contrast, are flexible and extensible in that payloads can be in any content type and carry any information.</p>

              <p id="semantic-pingback-and-webmention"><cite><a href="https://aksw.github.io/SemanticPingback/">Semantic Pingback</a></cite> [<a class="ref" href="#ref-2">2</a>] and <cite><a href="https://www.w3.org/TR/webmention">Webmention</a></cite> [<a class="ref" href="#ref-5">5</a>] are protocols to send and receive notifications when a relationship is created, updated, or deleted between two URLs. They both update the original <cite><a href="http://www.hixie.ch/specs/pingback/pingback">Pingback</a></cite> [<a class="ref" href="#ref-6">6</a>] mechanism by replacing the XML-RPC transport mechanism by a <code>x-www-form-urlencoded</code> request with two parameters (<code>source</code> and <code>target</code>). Resources which are the target for a notification advertise the respective receiving service or endpoint via a <code>Link</code> relation, either in HTTP headers or HTML. Semantic Pingback additionally enables discovery of the Pingback service where target description is available in RDF. While the content at source may indicate (in any convention or serialisation format) the type of relation between the source and target URLs, this information about the relation is not transmitted to the receiver’s endpoint; only the source and target URLs are sent. As such, there is also no way to deterministically distinguish between multiple mentions of the target at the source based on the information in the mention. Hence, each receiver implementation is responsible for interpreting the underlying information at the source, thereby potentially inconsistent across implementations. In contrast, Semantic Pingback does encourage generation of additional semantics about the relation(s) between the source and the target by processing the source as RDF if possible, and also defines specific ways for a receiving server to handle incoming pingback data in order to add the source data to an RDF knowledge base [<a class="ref" href="#ref-2">2</a>]. Beyond verifying that the source contains the URL of the target, Webmention does not specify any further requirements of the receiving server; nor is it expected that “mentions” are retrievable once they have been sent.</p>

              <p id="provenance-pingback">A <cite><a href="http://www.w3.org/TR/prov-aq/#provenance-pingback">Provenance Pingback</a></cite> endpoint is also advertised via the HTTP <code>Link</code> header; it accepts a list of URIs for provenance records describing uses of the resource [<a class="ref" href="#ref-7">7</a>]. Provenance Pingback does not specify any further behaviour by the receiving server, but the contents at the URIs listed in the notification body must be semantic data.</p>

              <p>Other notification mechanisms send more information than just URLs in the notification body in the form of fat pings. With the exception of WebSub, due to each mechanism’s focused use case, the payload of notifications is restricted to a particular vocabulary.</p>

              <p id="websub"><cite><a href="https://www.w3.org/TR/websub">WebSub</a></cite>, previously known as <cite><a href="http://pubsubhubbub.github.io/PubSubHubbub/pubsubhubbub-core-0.4.html">PubSubHubbub</a></cite> (<abbr title="PubSubHubbub">PuSH</abbr>), is an implementation of a publish-subscribe messaging pattern for content changes. In WebSub, content publishers delegate subscriptions to and distribution of new and updated content to a hub, which acts as a broker service. Subscribers send a request with a topic of interest - the URL of a resource - to a hub and specify a location where content can be delivered to. When a publisher informs a hub about content changes, a hub then handles the distribution by sending a copy of the content that a publisher makes available to the subscriber's preferred location. The distributed content may be any arbitrary content type. Subscribers only indicate that they have received hub's message or to retry later.</p>

              <p id="dsnotify"><cite><a href="http://www.cibiv.at/~niko/dsnotify/">DSNotify</a></cite> is a centralised service which crawls datasets and observes changes to links with the specific use case of preserving link integrity between Linked Open Data resources. Third-party applications can register with the sending service to receive notifications of changes in the form of a specific XML payload [<a class="ref" href="#ref-8">8</a>].</p>

              <p id="sparqlpush">With the <cite><a href="https://www.w3.org/2001/sw/wiki/SparqlPuSH">sparqlPuSH</a></cite> service, users may input a SPARQL query, the results of which are the specific updates they are interested in. The query is run periodically by the service, and the results are converted to RSS and Atom feeds, which is sent to a PuSH hub to which the user can subscribe [<a class="ref" href="#ref-9">9</a>].</p>

              <p id="resourcesync-change-notification">The <cite><a href="http://www.openarchives.org/rs/notification/1.0/notification">ResourceSync Change Notification</a></cite> specification also sends update notifications via a <abbr title="PubSubHubbub">PuSH</abbr> hub, with an XML payload based on the Sitemap format [<a class="ref" href="#ref-10">10</a>].</p>

              <p>Each of these mechanisms are triggered by subscription requests. That is, a user must actively solicit messages from a particular service, rather than having a way for a service to select a notification target and autonomously discover where to send notifications to.</p>

              <p>We present and discuss a <a href="#comparison-of-notification-mechanisms">Comparison of Notification Mechanisms</a> to better understand current limitations, and how the proposed protocol addresses them and at what cost.</p>
            </div>
          </section>


          <section id="use-cases-for-decentralised-notifications" inlist="" rel="schema:hasPart" resource="#use-cases-for-decentralised-notifications">
            <h2 property="schema:name">Use Cases for Decentralised Notifications</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>In this section we refer and outline commonly known user stories as the basis to developing social and Linked Data based protocols. We also describe common scenarios in scholarly communication.</p>

              <p id="social-web-working-group-user-stories">In 2015, the <cite><a href="https://www.w3.org/Social/WG">W3C Social Web Working Group</a></cite> documented <cite><a data-versiondate="2018-11-17T14:07:32Z" data-versionurl="https://web.archive.org/web/20181117140732/https://www.w3.org/wiki/Socialwg/Social_API/User_stories" href="https://www.w3.org/wiki/Socialwg/Social_API/User_stories">user stories</a></cite> in online social media in the process of producing technical specifications to enable decentralised and federated social communication. The user stories were derived from existing open and proprietary platforms on the Web, including notifications about events, certifications, annotations, requests, and announcements. For example, the following user stories concern notifications: <q>user posts a note</q>, <q>reading a user's recent posts</q>, <q>following a person</q>, <q>adding comments to bespoke software</q>, <q>direct messaging</q>.</p> 

              <p id="linked-data-platform-use-cases-and-requirements">The <cite><a href="https://www.w3.org/TR/ldp-ucr/">Linked Data Platform Use Cases and Requirements</a></cite> (<abbr title="Linked Data Platform Use Cases and Requirements">LDP-UCR</abbr>) documents <q cite="https://www.w3.org/TR/ldp-ucr/#aggregation-and-mashups-of-infrastructure-data">Aggregation and Mashups of Infrastructure Data</q> as one of the user stories and <q cite="https://www.w3.org/TR/ldp-ucr/#uc6">Aggregate resources</q> as the derived use case.</p>

              <p>In addition to general social Web activities, researchers and scholars, as well as software on their behalf (actors) perform discipline-specific activities to send (registration), discover (awareness), and reuse public and private notifications (accessibility, content). We describe some scenarios in scholarly communication which are facilitated by notifications:</p>

              <dl>
                <dt>Call for contributions</dt>
                <dd><em>Scenario</em>: A conference's organising committee would like to make a public announcement that they are now accepting research contributions that can be peer-reviewed.</dd>

                <dt>Publicising an article</dt>
                <dd><em>Scenario</em>: One of the authors of an article would like to let their colleagues know about their publication.</dd>

                <dt>Request for review</dt>
                <dd><em>Scenario</em>: The authors of an article requests their work to be reviewed by the members of their community.</dd>

                <dt>Annotating artifacts</dt>
                <dd><em>Scenario</em>: A reviewer or commenter wants to let the authors of an article know about their feedback.</dd>

                <dt>Authors notify referenced article</dt>
                <dd><em>Scenario</em>: In order to promote the relevancy of their article and its discovery, authors would like to announce that their article cited another article.</dd>

                <dt>Social actions and reactions</dt>
                <dd><em>Scenario</em>: Researchers perform public and private actions on resources they come across, including bookmarking, re-sharing with others, reactions such as "like", as well as following another researchers' activities.</dd>

                <dt>Providing research information</dt>
                <dd><em>Scenario</em>: A researcher wants to inform the scientific community that the research methods and data sources of their work is publicly accessible.</dd>

                <dt>State change</dt>
                <dd><em>Scenario</em>: As automated software detects changes in datasets, new version of an application, anomalies in sensor readings or experimental observations, it informs the laboratory.</dd>

                <dt>Status update</dt>
                <dd><em>Scenario</em>: Researchers would like to inform indexing and archiving systems about new or updates to existing artefacts so that they can perform their specialised operations.</dd>

                <dt>Artifacts of interest</dt>
                <dd><em>Scenario</em>: A recommender system, upon coming across articles and annotations that may be of interest to a researcher, wants to inform them based on their listed interests (research results, disputes over data analysis, new relations between research objects).</dd>

                <dt>Requesting access</dt>
                <dd><em>Scenario</em>: When one of the authors does not have write-access to an article, they want to make a request to their peers to have the required permissions.</dd>
              </dl>

<!--

              <p>These requirements reflecting the interactions among senders, receivers, and consumers - in the general use of application roles - overlap with the functional and non-functional requirements from LDP-UCR for client-server interactions:</p>

              <blockquote cite="https://www.w3.org/TR/ldp-ucr/">
                <ul>
                  <li>F2.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f2.1">The system shall provide the ability to create resources within a container</a></li>
                  <li>F3.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f3.1">The system shall provide the ability to retrieve resource descriptions</a></li>
                  <li>F3.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f3.2">The system shall enable the client to retrieve the description of a hash URI</a></li>
                  <li>F5.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f5.1">The system shall provide the ability to determine if a resource has changed</a></li>
                  <li>F6.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f6.1">The system shall provide the ability to aggregate resources</a></li>
                  <li>F6.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f6.2">The system shall support the addition of a resource to multiple aggregations</a></li>
                  <li>F7.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f7.1">The system shall provide the ability to retrieve a collection-level description of a composition</a></li>
                  <li>F7.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f7.2">The system shall provide the ability to retrieve an item-level description of a composition or aggregation</a></li>
                  <li>F8.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-f8.1">The system shall provide the ability to retrieve a paginated description of a composition or aggregation</a></li>

                  <li>NF2.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf2.1">The system shall encourage non-duplication of resources</a></li>
                  <li>NF2.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf2.2">The system shall support distribution of resources</a></li>
                  <li>NF3.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf3.1">The system shall support the use of standard vocabularies where appropriate</a></li>
                  <li>NF3.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf3.2">The system shall provide a scalable linking model</a></li>
                  <li>NF4.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf4.1">The system shall permit unrestricted vocabulary</a></li>
                  <li>NF5.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf5.1">The LDP shall ensure consistent access in the case of multiple simultaneous attempts to access a resource</a></li>
                  <li>NF6.1: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf6.1">The system shall allow resource descriptions that are a "mix of simple data and collections"</a></li>
                  <li>NF6.2: <a href="https://www.w3.org/TR/ldp-ucr/#dfn-nf6.2">The system shall support relative URIs enabling sharing of collections</a></li>
                </ul>
                <footer><cite><a href="https://www.w3.org/TR/ldp-ucr/">Linked Data Platform Use Cases and Requirements</a></cite>, W3C, 2014</footer>
              </blockquote>

-->

              <p>A useful decentralised notification protocol would be able to realise some of these use cases for scholars. In the next section I describe specific design considerations derived from these uses cases, which can be used to inform the design of the protocol.</p>
            </div>
          </section>

          <section id="design-considerations" inlist="" rel="schema:hasPart" resource="#design-considerations">
            <h2 property="schema:name">Design Considerations</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>This section details design considerations for a decentralised notification protocol. These considerations are derived from the use cases in the previous section, and also take into account conformance to the Linked Data design principles, as well as Web application best practices. We use these considerations to establish the concrete requirements and the points of implementation-specific flexibility for the protocol.</p>

              <p id="modularity"><strong>Modularity</strong> (<a href="http://csarven.ca/linked-data-notifications#modularity">R1</a>): To encourage modularity of applications, one should differentiate between different classes of implementation of the protocol. Two parties are involved in the creation of a notification: a <em>sender</em>, generating the notification data, and a <em>receiver</em>, storing the created resource. We also have the role of a <em>consumer</em>, which reads the notification data made available by a receiver, and repurposes it in some way. A software implementation can of course play two or all three of these roles; the important part is that it need not. A consuming application can read and use notification data without being concerned about ever sending or storing notifications.</p>

              <p id="reusability"><strong>Reusability</strong> (<a href="http://csarven.ca/linked-data-notifications#reusable-notifications">R2</a>): The relationship between the <em>consumer</em> and <em>receiver</em> roles is key to notifications being reusable. A consumer must be able to autonomously find the location of notifications for or about the particular resource it is interested in. To achieve this, we place a requirement on the receiver to expose notifications it has been sent in such away to permit consumer applications to access them; and specify how any resource can advertise its receiving endpoint for consumers to discover. To promote fair use or remixing of notification contents, applications can incorporate rights and licensing information into the data. Similarly, applications may include additional information on licensing resources that the notification refers to. The presence of this type of information is important for consumers to assess the (re)usability of data.</p>

              <p id="persistence-and-retrievability"><strong>Persistence and Retrievability</strong> (<a href="http://csarven.ca/linked-data-notifications#persistence-and-retrievability">R3</a>): Given the traditionally ephemeral nature of notifications, here we refer to persistence as units of information that can registered. Applications may benefit from referring to or reusing notifications if the notifications are known to be retrievable in the long term, or indicate their expected lifespan. This enforces the notion that notifications are considered resources in their own right, with their own dereferencable URIs.</p>

              <p id="adaptability"><strong>Adaptability</strong> (<a href="http://csarven.ca/linked-data-notifications#adaptability">R4</a>): A notification protocol should be adaptable for different domains, but that there is no need to create multiple domain-specific notification protocols; the fundamental mechanics are the same given the three main architectural layers of the Web - identification, interaction, data formats.</p>

              <p id="target-representation"><strong>Target representation</strong> (<a href="http://csarven.ca/linked-data-notifications#target-representation">R4-A</a>): Any resource may be the <em>target</em> of a notification. By target, we mean a notification may be addressed <em>to</em> the resource, be <em>about</em> the resource, or for a sender to otherwise decide that it is appropriate to draw the attention of the resource (or resource owner) to the information in the notification body. As such, any Web resource must be able to advertise an endpoint to which it can receive notifications. Resources can be RDF or non-RDF (such as an image, or CSV dataset), and may be informational (a blog post, a user profile) or non-informational (a person).</p>

              <p id="notification-body"><strong>Notification body</strong> (<a href="http://csarven.ca/linked-data-notifications#notification-body">R4-B</a>): We consider the <em>contents</em> of a notification to be application specific because different domains have different needs. From a sender’s perspective, we permit a notification to contain <em>any data</em>, and a notification can use <em>any vocabulary</em>. From a consumer’s perspective, interoperability between different applications occurs through vocabulary reuse, and shared understanding of terms. This is in accordance with Linked Data principles in general. The practical upshot of this is that a calendar application which consumes event invitations using the <cite><a href="https://www.w3.org/TR/rdfcal/">RDF Calendar</a></cite> vocabulary is likely to completely ignore notifications containing the <cite><a href="https://www.w3.org/TR/prov-o/">PROV Ontology</a></cite>, even if it finds them all stored in the same place. For two independent applications operating in the <em>same</em> domain, a shared understanding of appropriate vocabulary terms is assumed.</p>

              <p id="notification-verification"><strong>Notification verification</strong> (<a href="http://csarven.ca/linked-data-notifications#notification-verification">R4-C</a>): From a receiver’s perspective, exposing itself to receive any blobs of RDF data from unknown senders may be problematic. Thus, it should be possible for the receiver to enforce restrictions and accept only notifications that are acceptable according to its own criteria (deemed by eg. user configuration; domain-specific receivers). This can be used as an anti-spam measure, a security protection, or for attaining application and data integrity.</p>

              <p id="subscribing"><strong>Subscribing</strong> (<a href="http://csarven.ca/linked-data-notifications#subscribing">R5</a>): In general, applications may require that new notifications are pushed to them in real-time, or to request them at appropriate intervals. To take this into account, we expand our definition of senders, receivers and consumers with the following interaction expectations: notifications are <em>pushed</em> from senders to receivers; and <em>pulled</em> from receivers by consumers.</p>

              <p>The table below shows the design considerations as applicable to each use case.</p>

              <table>
                <caption>Design considerations derived from use cases for decentralised notifications</caption>
                <thead>
                  <tr><th></th><th><a href="#modularity">R1</a></th><th><a href="#reusability">R2</a></th><th><a href="#persistence-and-retrievability">R3</a></th><th><a href="#target-representation">R4-A</a></th><th><a href="#notification-body">R4-B</a></th><th><a href="#notification-verification">R4-C</a></th><th><a href="#subscribing">R5</a></th></tr>
                </thead>
                <tbody>
                  <tr><th>Call for contributions</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td></tr>
                  <tr><th>Publicising an article</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                  <tr><th>Request for review</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td></tr>
                  <tr><th>Annotating artifacts</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                  <tr><th>Authors notify referenced article</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                  <tr><th>Social actions and reactions</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr>
                  <tr><th>Providing research information</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                  <tr><th>State change</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr>
                  <tr><th>Status update</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                  <tr><th>Artifacts of interest</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr>
                  <tr><th>Requesting access</th><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr>
                </tbody>
              </table>
            </div>
          </section>

          <section id="a-decentralised-notifications-protocol" inlist="" rel="schema:hasPart" resource="#a-decentralised-notifications-protocol">
            <h2 property="schema:name">A Decentralised Notifications Protocol</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p><dfn id="ldn">Linked Data Notifications (<abbr title="Linked Data Notifications">LDN</abbr>)</dfn> is an HTTP-based protocol to facilitate exchanging messages between applications. LDN describes how servers (receivers) can receive messages pushed to them by applications (senders), as well as how other applications (consumers) may retrieve those messages. Any resource (target) can advertise a receiving endpoint (Inbox) for notification messages. Messages are expressed in RDF, and can contain arbitrary data. LDN is a <cite><a href="https://www.w3.org/TR/ldn/">W3C Recommendation</a></cite>.</p>

              <p class="todo">Should the LDN spec be included in the appendix? What are the conditions (rights) for including it here?</p>

              <p id="design-intent">We designed the LDN protocol to support sharing and reuse of notifications <em>across</em> applications, regardless of how they were generated or what their contents are. We describe how the principles of identification, addressability and semantic representation can be applied to notifications on the Web. Specifying LDN as a formal protocol allows independently implemented, heterogeneous applications which generate and use notifications, to seamlessly work together. Thus, LDN supports the decentralisation of the Web as well as encourages the generation and consumption of Linked Data.</p>

              <p id="design-decision">LDN is built on existing W3C standards and Linked Data principles. In particular, the storage of notifications is compatible with the <cite>Linked Data Platform</cite> specification; notifications are identified by HTTP URIs; and notification contents are available as JSON-LD (or other RDF syntaxes as per content-negotiation). A key architectural decision is the separation of concerns between <em>senders</em>, <em>receivers</em>, and <em>consumers</em> of notifications. Implementations of the protocol can play one or more of these roles, and interoperate successfully with implementations playing the complementary roles. This means that notifications generated by one application can be reused by a completely different application, accessed via the store where the notification data resides, through shared Linked Data vocabularies. LDN also pushes the decentralised approach further by allowing any <em>target</em> resource to advertise its Inbox anywhere on the Web; that is, targets do not need to be coupled with or controlled by a receiver operating from the same server, and can make use of a third-party <em>inbox-as-a-service</em>.</p>

              <p>Beyond a generic understanding of hypermedia, LDN senders and consumers need little to no prior knowledge about how to interact with receivers. Furthermore, senders and consumers determine a target's inbox location dynamically. This design approach is aligned with the notion of <a href="scholarly-communication-on-the-web#self-describing">self-describing resources</a> in that applications are only required to identify a particular relation indicating the inbox location, and perform a <em><a href="scholarly-communication-on-the-web#follow-your-nose">follow your nose</a></em> type of exploration. Given that a target's preferred inbox location may change at their discretion, applications can be adaptive in inbox discovery.</p>

              <div id="concept-scheme-ldn" rel="schema:hasPart" resource="#concept-scheme-ldn">
                <p resource="#concept-scheme-ldn" typeof="skos:ConceptScheme"><span property="skos:definition">We use the following definitions for inbox and notification.</span></p>

                <p>An <strong about="#concept-ldn-inbox" id="concept-ldn-inbox" property="skos:prefLabel" rel="skos:topConceptOf" resource="#concept-scheme-ldn" typeof="skos:Concept">Inbox</strong> is <span about="#concept-ldn-inbox" property="skos:definition">a container or directory (attached to a Web resource) which is used to store and serve a collection of notifications.</span> A <strong about="#concept-ldn-notification" id="concept-ldn-notification" property="skos:prefLabel" rel="skos:topConceptOf" resource="#concept-scheme-ldn" typeof="skos:Concept">notification</strong> is <span about="#concept-ldn-notification" property="skos:definition">a retrievable resource which returns RDF that is normally discovered through an Inbox. The contents of notifications are intended to describe a change in state of some other resource, or contain new information for the attention of a user or process, and may be subject to constraints of the Inbox it is contained in.</span></p>
              </div>

              <figure id="figure-linked-data-notifications-overview" inlist="" rel="schema:hasPart" resource="#figure-linked-data-notifications-overview">
                <svg about="" prefix="rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs: http://www.w3.org/2000/01/rdf-schema# xsd: http://www.w3.org/2001/XMLSchema# schema: https://schema.org/" rel="schema:isPartOf" resource="https://www.w3.org/TR/ldn/" version="1.1" viewBox="0 0 420 200" xml:lang="en" xmlns="http://www.w3.org/2000/svg"><g about="" rel="schema:hasPart" typeof="schema:ImageObject"><metadata about=""><tspan rel="schema:license" resource="https://creativecommons.org/licenses/by/4.0/"></tspan><tspan rel="schema:creator" resource="http://csarven.ca/#i"></tspan></metadata><title about="" property="schema:name">Linked Data Notifications</title><style>.relation{font-size:12px;font-family:monospace;}.predicate{font-style:italic;}.actor{font-size:20px;font-family:sans-serif;}.legend{font-size:8px;font-family:sans-serif;}</style><a about="#target" href="https://www.w3.org/TR/ldn/#discovery" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#discovery" target="_top"><text class="actor" x="170" y="19">Target</text></a><a about="#sender" href="https://www.w3.org/TR/ldn/#sender" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#sender" target="_top"><text class="actor" x="3" y="68">Sender</text></a><a about="#consumer" href="https://www.w3.org/TR/ldn/#consumer" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#consumer" target="_top"><text class="actor" x="316" y="70">Consumer</text></a><a about="#receiver" href="https://www.w3.org/TR/ldn/#receiver" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#receiver" target="_top"><text class="actor" x="57" y="153">Receiver</text></a><a about="#get" href="https://tools.ietf.org/html/rfc7231#section-4.3.1" property="schema:name" rel="rdfs:isDefinedBy" resource="https://tools.ietf.org/html/rfc7231#section-4.3.1" target="_top"><text class="relation http" x="81" y="34">GET</text></a><a about="#head" href="https://tools.ietf.org/html/rfc7231#section-4.3.2" property="schema:name" rel="rdfs:isDefinedBy" resource="https://tools.ietf.org/html/rfc7231#section-4.3.2" target="_top"><text class="relation http" x="100" y="50">HEAD</text></a><a href="https://tools.ietf.org/html/rfc7231#section-4.3.1" target="_top"><text class="relation http" x="286" y="34">GET</text></a><a href="https://tools.ietf.org/html/rfc7231#section-4.3.2" target="_top"><text class="relation http" x="259" y="50">HEAD</text></a><a about="#post" href="https://tools.ietf.org/html/rfc7231#section-4.3.3" property="schema:name" rel="rdfs:isDefinedBy" resource="https://tools.ietf.org/html/rfc7231#section-4.3.3" target="_top"><text class="relation http" x="62" y="92">POST</text></a><a href="https://tools.ietf.org/html/rfc7231#section-4.3.1" target="_top"><text class="relation http" x="300" y="94">GET</text></a><a about="#ldp-inbox" href="https://www.w3.org/ns/ldp#inbox" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/ns/ldp#inbox" target="_top"><text class="relation predicate" x="166" y="67">ldp:inbox</text></a><a about="#ldp-contains" href="https://www.w3.org/ns/ldp#contains" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/ns/ldp#contains" target="_top"><text class="relation predicate" x="166" y="153">ldp:contains</text></a><a about="#discovery" href="https://www.w3.org/TR/ldn/#discovery" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#discovery" target="_top"><text class="actor" x="175" y="122">Inbox</text></a><a about="#notification" href="https://www.w3.org/TR/ldn/#introduction" property="schema:name" rel="rdfs:isDefinedBy" resource="https://www.w3.org/TR/ldn/#introduction" target="_top"><text class="actor" x="171" y="188">Notification</text></a><text class="legend" x="310" y="182">Linked Data Notifications</text><a href="https://www.w3.org/TR/ldn/"><text class="legend" x="310" y="192">https://www.w3.org/TR/ldn/</text></a><path d="M154.018 5.559v14.023h12.27V12.57h-7.01V5.56h-5.26zm7.012 0v5.258h5.259L166.03 5.56zm-5.259 3.505h1.753v1.753h-1.753V9.064zm0 3.506h1.753v1.753h-1.753V12.57zm0 3.506h7.012v1.753h-7.012v-1.753z"></path><path d="m155.03056,108.76175 0,1.51758 12.14062,0 0,-1.51758 -12.14062,0 z m 0,3.03516 0,8.9628 c 0,0.0911 0.0516,0.14266 0.14266,0.14266 l 11.85682,0 c 0.0911,0 0.14265,-0.0516 0.14265,-0.14266 l 0,-8.9628 -4.50568,0 0,1.56461 -3.0822,0 0,-1.56461 -4.55274,0 z"></path><path d="M154.02 174.407v14.01h12.257v-7.006h-7.004v-7.004h-5.254zm7.004 0v5.253h5.253l-5.253-5.253z"></path><path d="M75.094 56.246c26.774-25.646 73.45-42.406 73.45-42.406M312.544 56.681c-26.774-25.646-73.449-42.406-73.449-42.406M76.48 66.868c26.774 25.646 73.45 42.406 73.45 42.406" fill="none" stroke-width="1" stroke="#000"></path><path d="M312.898 70.757c-26.774 25.646-73.45 42.406-73.45 42.406" fill="none" stroke-width="1" stroke="#000"></path><path d="M329.61 79.188c-15.293 56.301-41.953 93.091-41.953 93.091" fill="none" stroke-width="1" stroke="#000"></path><path d="M146.06 98.447h141V194.5h-141z" fill="none" stroke-dasharray="3,6" stroke-width="1" stroke="#000"></path><path d="M159.06 24.117c-7.82 39.778 0 76.156 0 76.156" fill="none" stroke-width="1" stroke="#000"></path><path d="M144.901 17.027l5.702-2.075-5.702-2.076zM156.574 98.406l3.523 4.94.476-6.05zM238.698 111.024l-4.06 4.508 6.008-.843zM145.198 110.4l6.065.165-4.54-4.026zM240.493 16.762l-5.702-2.075 5.702-2.076zM286.493 170.237l-3.066 5.236 5.715-2.04zM156.767 165.375l3.524 4.94.476-6.05z" stroke-width="1" stroke="#000"></path><path d="M160 124c-4.73 24.06 0 46.063 0 46.063" fill="none" stroke-width="1" stroke="#000"></path></g></svg>

                <figcaption property="schema:name">From <cite><a href="https://www.w3.org/TR/ldn/linked-data-notifications-overview.svg">Overview of Linked Data Notifications</a></cite>, 2017</figcaption>
              </figure>


              <section id="application-interactions" inlist="" rel="schema:hasPart" resource="#application-interactions">
                <h3 property="schema:name">Application Interactions</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>Building on the notion of <a href="#modularity">modularity</a>, we consider that <em>interoperability</em> occurs between two classes of interactions, <a href="#sender-to-receiver">senders and receivers</a>, or between <a href="#consumer-to-receiver">consumers and receivers</a>, when the sender/consumer makes a request to the receiver, and the receiver sends the expected response.</p>

                  <section id="sender-to-receiver" inlist="" rel="schema:hasPart" resource="#sender-to-receiver">
                    <h4 property="schema:name">Sender to Receiver interactions</h4>
                    <div datatype="rdf:HTML" property="schema:description">
                      <figure>
                        <svg xmlns="http://www.w3.org/2000/svg" width="371" height="320" xmlns:xlink="http://www.w3.org/1999/xlink"><source><![CDATA[Title: LDN Sender to Receiver
Sender->Target: discoverInbox
Target-->>Sender:response
Sender->Receiver: sendNotification
Receiver-->>Sender:response]]></source><desc>LDN Sender to Receiver</desc><defs><marker viewBox="0 0 5 5" markerWidth="5" markerHeight="5" orient="auto" refX="5" refY="2.5" id="markerArrowBlock"><path d="M 0 0 L 5 2.5 L 0 5 z"></path></marker><marker viewBox="0 0 9.6 16" markerWidth="4" markerHeight="16" orient="auto" refX="9.6" refY="8" id="markerArrowOpen"><path d="M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z"></path></marker></defs><g class="title"><rect x="10" y="10" width="214.96665954589844" height="28.633333206176758" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="15" y="30.049999237060547"><tspan x="15">LDN Sender to Receiver</tspan></text></g><g class="actor"><rect x="10" y="48.63333320617676" width="75.9000015258789" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="20" y="73.6833324432373"><tspan x="20">Sender</tspan></text></g><line x1="47.95000076293945" x2="47.95000076293945" y1="87.26666641235352" y2="261.79999923706055" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="actor"><rect x="151.11666870117188" y="48.63333320617676" width="75.9000015258789" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="161.11666870117188" y="73.6833324432373"><tspan x="161.11666870117188">Target</tspan></text></g><line x1="189.06666946411133" x2="189.06666946411133" y1="87.26666641235352" y2="261.79999923706055" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="actor"><rect x="247.01667022705078" y="48.63333320617676" width="94.53333282470703" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="257.0166702270508" y="73.6833324432373"><tspan x="257.0166702270508">Receiver</tspan></text></g><line x1="294.2833366394043" x2="294.2833366394043" y1="87.26666641235352" y2="261.79999923706055" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="signal"><text x="57.95000076293945" y="117.99999904632568"><tspan x="57.95000076293945">discoverInbox</tspan></text><line x1="47.95000076293945" x2="189.06666946411133" y1="125.89999961853027" y2="125.89999961853027" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="81.24166870117188" y="156.63333225250244"><tspan x="81.24166870117188">response</tspan></text><line x1="189.06666946411133" x2="47.95000076293945" y1="164.53333282470703" y2="164.53333282470703" style="stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowOpen&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="96.58333587646484" y="195.2666654586792"><tspan x="96.58333587646484">sendNotification</tspan></text><line x1="47.95000076293945" x2="294.2833366394043" y1="203.1666660308838" y2="203.1666660308838" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="133.85000228881836" y="233.89999866485596"><tspan x="133.85000228881836">response</tspan></text><line x1="294.2833366394043" x2="47.95000076293945" y1="241.79999923706055" y2="241.79999923706055" style="stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowOpen&quot;);" stroke="#000000" fill="none"></line></g></svg>
                        <figcaption class="todo">Prettify diagram</figcaption>
                      </figure>

                      <p>The following steps (in order without skipping) describe the interaction between sender and receiver:</p>

                      <ol>
                        <li>A sender is triggered, either by a human or an automatic process, to deliver a notification;</li>
                        <li>The sender chooses a target resource to send notifications to;</li>
                        <li>The sender discovers the location of the target’s <em>Inbox</em> through the <code>ldp:inbox</code> relation in the HTTP <code>Link</code> header or RDF body of the target resource;</li>
                        <li>The sender creates the body of the notification according to the needs of application;</li>
                        <li>The sender makes a <code>POST</code> to the Inbox URL, containing the body in JSON-LD or in another serialisation acceptable by the server;</li>
                        <li>The receiver optionally applies filtering rules, and sends the appropriate HTTP response code to accept or reject the notification;</li>
                        <li>The receiver exposes the notification data (according to appropriate access control) for use by consumers.</li>
                      </ol>
                    </div>
                  </section>


                  <section id="consumer-to-receiver" inlist="" rel="schema:hasPart" resource="#consumer-to-receiver">
                    <h4 property="schema:name">Consumer to Receiver interactions</h4>
                    <div datatype="rdf:HTML" property="schema:description">
                      <figure>
                        <svg xmlns="http://www.w3.org/2000/svg" width="380" height="397" xmlns:xlink="http://www.w3.org/1999/xlink"><source><![CDATA[Title: LDN Consumer to Receiver
Consumer->Target: discoverInbox
Target-->>Consumer:response
Consumer->Receiver: getInbox
Receiver-->>Consumer:response
Consumer->Receiver: getInboxNotification
Receiver-->Consumer:response]]></source><desc>LDN Consumer to Receiver</desc><defs><marker viewBox="0 0 5 5" markerWidth="5" markerHeight="5" orient="auto" refX="5" refY="2.5" id="markerArrowBlock"><path d="M 0 0 L 5 2.5 L 0 5 z"></path></marker><marker viewBox="0 0 9.6 16" markerWidth="4" markerHeight="16" orient="auto" refX="9.6" refY="8" id="markerArrowOpen"><path d="M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z"></path></marker></defs><g class="title"><rect x="10" y="10" width="233.60000610351562" height="28.633333206176758" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="15" y="30.049999237060547"><tspan x="15">LDN Consumer to Receiver</tspan></text></g><g class="actor"><rect x="10" y="48.63333320617676" width="94.53333282470703" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="20" y="73.6833324432373"><tspan x="20">Consumer</tspan></text></g><line x1="57.266666412353516" x2="57.266666412353516" y1="87.26666641235352" y2="339.06666564941406" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="actor"><rect x="160.43333435058594" y="48.63333320617676" width="75.9000015258789" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="170.43333435058594" y="73.6833324432373"><tspan x="170.43333435058594">Target</tspan></text></g><line x1="198.3833351135254" x2="198.3833351135254" y1="87.26666641235352" y2="339.06666564941406" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="actor"><rect x="256.33333587646484" y="48.63333320617676" width="94.53333282470703" height="38.63333320617676" style="stroke-width: 2;" stroke="#000000" fill="#ffffff"></rect><text x="266.33333587646484" y="73.6833324432373"><tspan x="266.33333587646484">Receiver</tspan></text></g><line x1="303.60000228881836" x2="303.60000228881836" y1="87.26666641235352" y2="339.06666564941406" style="stroke-width: 2;" stroke="#000000" fill="none"></line><g class="signal"><text x="67.26666641235352" y="117.99999904632568"><tspan x="67.26666641235352">discoverInbox</tspan></text><line x1="57.266666412353516" x2="198.3833351135254" y1="125.89999961853027" y2="125.89999961853027" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="90.55833435058594" y="156.63333225250244"><tspan x="90.55833435058594">response</tspan></text><line x1="198.3833351135254" x2="57.266666412353516" y1="164.53333282470703" y2="164.53333282470703" style="stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowOpen&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="143.16666793823242" y="195.2666654586792"><tspan x="143.16666793823242">getInbox</tspan></text><line x1="57.266666412353516" x2="303.60000228881836" y1="203.1666660308838" y2="203.1666660308838" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="143.16666793823242" y="233.89999866485596"><tspan x="143.16666793823242">response</tspan></text><line x1="303.60000228881836" x2="57.266666412353516" y1="241.79999923706055" y2="241.79999923706055" style="stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowOpen&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="82.60833740234375" y="272.5333318710327"><tspan x="82.60833740234375">getInboxNotification</tspan></text><line x1="57.266666412353516" x2="303.60000228881836" y1="280.4333324432373" y2="280.4333324432373" style="stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g><g class="signal"><text x="143.16666793823242" y="311.1666650772095"><tspan x="143.16666793823242">response</tspan></text><line x1="303.60000228881836" x2="57.266666412353516" y1="319.06666564941406" y2="319.06666564941406" style="stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);" stroke="#000000" fill="none"></line></g></svg>
                        <figcaption class="todo">Prettify diagram</figcaption>
                      </figure>

                      <p>The following steps (in order without skipping) describe the interaction between consumer and receiver:</p>

                      <ol>
                        <li>A consumer selects a target and discovers the location of its Inbox in the same way as the sender;</li>
                        <li>A receiver responds to <code>GET</code> requests made to the Inbox URL with a listing of the URLs of notifications that have previously been accepted, linked to the Inbox with the <code>ldp:contains</code> predicate;</li>
                        <li>The receiver responds to <code>GET</code> requests made to the individual notification URLs with JSON-LD (or optionally other serialisations);</li>
                        <li>Following the retrieval of notification listings or individual notifications, the consumer may perform further processing, combine with some other data, or simply present the results in a suitable human-readable way.</li>
                      </ol>
                    </div>
                  </section>
                </div>
              </section>


              <section id="data-formats" inlist="" rel="schema:hasPart" resource="#data-formats">
                <h3 property="schema:name">Data Formats and Content Negotiation</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>The data formats which are used by a notification specification must be chosen to maximise interoperability between implementations. <cite>Structure of Scholarly Information</cite> makes the argument for using <a href="structure-of-scholarly-information#rdf-as-the-language">RDF as the language</a> to express human and machine-readable information on the Web. Allowing LDN actors - senders, receivers, and consumers - to handle data irrespective of the particular RDF serialisation permits flexibility, however it can also be costly to support. We take into account:</p>

                  <ul>
                    <li><em>application interoperability</em> eg. should applications support all current RDF formats, as well as new versions or formats in the future?</li>
                    <li><em>maintenance of RDF parsers and serialisation libraries</em> eg. will the RDF libraries that applications use be kept up to date?</li>
                    <li><em>complexity of their inclusion in applications</em> eg. what are the costs or concerns of using all RDF formats?</li>
                    <li><em>run-time efficiency</em> eg. how well will applications perform going forward?</li>
                  </ul>

                  <p><strong>Why JSON-LD</strong>: To address these issues, choosing a single RDF serialisation to <em>require</em> is necessary for consistent interoperability, as well as keeping processing requirements or external code dependencies minimal. While any RDF notation would satisfy that need, we decided that LDN requires all applications to create and understand the JSON-LD syntax, both for the contents of Inbox as well as for individual notifications.</p>

                  <p>To some extent, JSON-LD is compatible with existing JSON libraries or in some cases native programming language data structures. For example, Web browsers have a built-in interpreter for JavaScript that can handle JSON objects, that can take advantage of native object operations. Same data processing and manipulation operations are also available in a Node.js environment. Having said that, JSON-LD is intended to be processed as an RDF notation, as opposed to plain JSON. Hence, JSON-LD is just one convenience to certain kinds of environments that the application is confined to. JSON-LD is also advantageous in being familiar for developers who are <cite><a href="http://manu.sporny.org/2014/json-ld-origins-2/">used to JSON-based APIs but not RDF</a></cite>.</p>

                  <p><strong>Content-negotiation</strong>: Optionally, applications may attempt to exchange different RDF serialisations by performing <strong>content negotiation</strong>. As in compliance with HTTP and REST principles, a sender may make an <code>OPTIONS</code> request to the receiver to determine the RDF content types accepted by the server. A receiver can expose <code>Accept-Post</code> headers for senders, and so the sender can serialize the notification in the request body accordingly. Consumers can send <code>Accept</code> headers to receivers to signal which RDF content types they prefer and capable of processing.</p>

                  <p>By mandating one RDF syntax (JSON-LD) for applications to communicate with, as well as permitting other syntaxes to discover and exchange notifications, compatibility across applications is assured.</p>
                </div>
              </section>

              <section id="security-privacy-content-considerations" inlist="" rel="schema:hasPart" resource="#security-privacy-content-considerations">
                <h3 property="schema:name">Security, Privacy and Content Considerations</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p id="target-ownership"><strong>Target ownership</strong>: As per AWWW's <cite>URI Ownership</cite>, the Inbox is ultimately controlled by the owner of LDN Receiver, and subject to third-party access to HTTP headers and content. Hence, publishers of the resources advertising an Inbox (target) are expected to be aware of using servers they trust or control for the Inbox location.</p>

                  <p id="constraints"><strong>Constraints</strong>: One way to filter unwarranted notifications from being created on the server and exposed is where Inbox URLs announce their own constraints eg. <cite><a href="https://www.w3.org/TR/shacl/">Shapes Constraint Language (SHACL)</a></cite>, <cite><a href="https://shexspec.github.io/spec/">ShEx</a></cite>, Web Annotation Protocol, via an HTTP <code>Link</code> header or body of the resource with a <code>rel</code> value of <code>ldp:constrainedBy</code>. For example, an LDN receiver may want to allow notifications with a certain "shape"; a model specifying allowed and required values in a notification. This is so that senders can comply with the advertised constraint specification or the receiver may reject their notification. Rejecting notifications which do not match a specific pattern in their contents, or the <em>shape</em> of the data, is one way to filter. For example, if the Inbox owner knows that they will only ever use a consuming application which processes friend requests, they can configure their receiver to filter out anything that does not match the pattern for a friend request, helping their consumer to be more efficient. If the notification constraints are also advertised by the receiving service as structured descriptions, generation and consumption of the notifications can be further automated. Constraints are particularly useful towards providing notifications that meets a certain criteria so that it can be used effectively by consuming applications.</p>

                  <p id="authenticated-inboxes"><strong>Authenticated inboxes</strong>: The requirement for reusable notifications could be seen as a potential risk for privacy. The LDN Receivers are expected to consider implementing access control on the Inbox URL as well as the individual notification URL and may restrict reading and writing to a whitelist of trusted senders. Various authentication methods which could be used alongside LDN with the idea that notifications are not necessarily public but only visible or reusable by intended parties. The receivers decide (based on their use case) which consumers (based on any criteria) can reuse. They achieve this by setting authentication and authorization settings on the notifications. As  different authentication mechanisms are appropriate for different applications, the notification protocol should ideally be usable alongside various methods such as clientside certificates, eg. WebID+TLS, token-based, eg. OAuth 2.0, or digital signatures.</p>

                  <p id="personally-identifiable-information"><strong>Personally identifiable information</strong>: Notification payloads may contain any data including that which identifies the sender or the receiver. As access to the Inbox and notification data is under the control of the receiver, they ultimately determine what information may be exposed to the world. Once fetched by a third-party, any piece of information could potentially be subject to further (unauthorised) distribution and reuse. Hence, this is orthogonal to whether the notifications are ephemeral or persistent.</p>

                  <p id="security-and-privacy-review"><strong>Security and Privacy Review</strong>: The LDN specification includes a <cite><a href="https://www.w3.org/TR/ldn/#security-and-privacy-review">Security and Privacy Review</a></cite> covering threat models categorised as: <q cite="https://www.w3.org/TR/2015/NOTE-security-privacy-questionnaire-20151210/">Passive Network Attackers, Active Network Attackers, Same-Origin Policy Violations, Third-Party Tracking</q> as outlined in W3C <cite><a href="https://www.w3.org/TR/2015/NOTE-security-privacy-questionnaire-20151210/">Self-Review Questionnaire: Security and Privacy</a></cite>.</p>
                </div>
              </section>


              <section id="protocol-interaction-and-content" inlist="" rel="schema:hasPart" resource="#protocol-interactin-and-content">
                <h3 property="schema:name">Protocol Interaction and Content</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>This section demonstrates some interactions between a server with a target resource, and among sender, receiver, and consumer implementations.</p>

                  <p>Discovering an inbox:</p>

                  <figure class="listing" id="discovery-json-example-compact" rel="schema:hasPart" resource="#discovery-json-example-compact">
                    <pre about="#discovery-json-example-compact" property="schema:description" typeof="fabio:Script"><code>GET / HTTP/1.1</code>
<code>Host: csarven.ca</code>
<code>Accept: application/ld+json</code>
<code></code>
<code>HTTP/1.1 200 OK</code>
<code>Content-Type: application/ld+json</code>
<code></code>
<code>{</code>
<code>  "@context": "http://www.w3.org/ns/ldp",</code>
<code>  "@id": "http://csarven.ca/#i",</code>
<code>  "inbox": "http://csarven.ca/inbox/"</code>
<code>}</code></pre>
                    <figcaption>Discovering an Inbox with a <code>GET</code> request to retrieve JSON-LD. Response in JSON-LD compact form.</figcaption>
                  </figure>

                  <p>Consumer requesting the inbox and receiver's response:</p>

                  <figure class="listing" id="get-inbox-response" rel="schema:hasPart" resource="#get-inbox-response">
                    <pre about="#get-inbox-response" property="schema:description" typeof="fabio:Script"><code>GET /inbox/ HTTP/1.1</code>
<code>Host: example.org</code>
<code>Accept: application/ld+json</code>
<code>Accept-Language: en-GB,en;q=0.8, en-US;q=0.6</code>
<code></code>
<code>HTTP/1.1 200 OK</code>
<code>Content-Type: application/ld+json</code>
<code>Content-Language: en</code>
<code></code>
<code>{</code>
<code>  "@context": "http://www.w3.org/ns/ldp",</code>
<code>  "@id": "http://example.org/inbox/",</code>
<code>  "contains": [</code>
<code>    "http://example.org/inbox/5c6ca040",</code>
<code>    "http://example.org/inbox/92d72f00"</code>
<code>  ]</code>
<code>}</code></pre>
                    <figcaption>Receiver responding to a <code>GET</code> request on the Inbox with a listing of notifications.</figcaption>
                  </figure>


                  <p>Consumer getting a notification:</p>

                  <figure class="listing" id="notification-announce-annotation" rel="schema:hasPart" resource="#notification-announce-annotation">

                    <pre about="#notification-announce-annotation" property="schema:description" typeof="fabio:Script"><code>GET /inbox/14a792f0 HTTP/1.1</code>
<code>Host: example.org</code>
<code>Accept: application/ld+json, text/turtle, application/xhtml+xml, text/html</code>
<code>Accept-Language: en-GB,en;q=0.8, en-US;q=0.6</code>
<code></code>
<code>HTTP/1.1 200 OK</code>
<code>Content-Type: application/ld+json;profile="https://www.w3.org/ns/activitystreams"</code>
<code>Content-Language: en</code>
<code></code>
<code>{</code>
<code>  "@context": [</code>
<code>    "https://www.w3.org/ns/activitystreams",</code>
<code>    { "@language": "en" }</code>
<code>  ],</code>
<code>  "@id": "http://example.org/inbox/14a792f0",</code>
<code>  "@type": "Announce",</code>
<code>  "actor": {</code>
<code>    "@id": "http://csarven.ca/#i",</code>
<code>    "name": "Sarven Capadisli"</code>
<code>  },</code>
<code>  "object": {</code>
<code>    "@context": "http://www.w3.org/ns/anno.jsonld",</code>
<code>    "@id": "http://example.net/note",</code>
<code>    "@type": "Annotation",</code>
<code>    "motivation": "http://www.w3.org/ns/oa#assessing",</code>
<code>    "rights": "http://creativecommons.org/licenses/by/4.0/"</code>
<code>  },</code>
<code>  "target": "http://example.org/article",</code>
<code>  "updated": {</code>
<code>    "@type": "http://www.w3.org/2001/XMLSchema#dateTime",</code>
<code>    "@value": "2016-06-28T19:56:20.114Z"</code>
<code>  }</code>
<code>}</code></pre>
                    <figcaption><span about="#test-consumer-notification-assessing" id="test-consumer-notification-assessing" property="skos:definition" rel="skos:topConceptOf" resource="#ldn-tests-consumer" typeof="skos:Concept">Result of a GET request on an individual notification discovered in an Inbox.</span></figcaption>
                  </figure>


                  <p>Sending a notification:</p>

                  <figure class="listing" id="sending-notification-request" rel="schema:hasPart" resource="#sending-notification-request">
                    <pre about="#sending-notification-request" property="schema:description" typeof="fabio:Script"><code>POST /inbox/ HTTP/1.1</code>
<code>Host: example.org</code>
<code>Content-Type: application/ld+json;profile="https://www.w3.org/ns/activitystreams"</code>
<code>Content-Language: en</code>
<code></code>
<code>{</code>
<code>  "@context": "https://www.w3.org/ns/activitystreams",</code>
<code>  "@id": "",</code>
<code>  "@type": "Announce",</code>
<code>  "actor": "https://rhiaro.co.uk/#me",</code>
<code>  "object": "http://example.net/note",</code>
<code>  "target": "http://example.org/article",</code>
<code>  "updated": "2016-06-28T19:56:20.114Z"</code>
<code>}</code></pre>
                    <figcaption property="schema:name">Example request to send to an Inbox.</figcaption>
                  </figure>


                  <p>Response to send request:</p>

                  <figure class="listing" id="sending-notification-response" rel="schema:hasPart" resource="#sending-notification-response">
                    <pre about="#sending-notification-response" property="schema:description" typeof="fabio:Script"><code>HTTP/1.1 201 Created</code>
<code>Location: http://example.org/inbox/5c6ca040</code></pre>
                    <figcaption property="schema:name">Example response to a <code>POST</code> request on an Inbox.</figcaption>
                  </figure>

                  <p>Sender initiates content-negotiation and sends notifications:</p>

                  <figure class="listing" id="notification-qualified-relation" inlist="" rel="schema:hasPart" resource="#notification-qualified-relation">
                    <pre about="#notification-qualified-relation" property="schema:description" typeof="fabio:Script"><code>OPTIONS /inbox/ HTTP/1.1</code>
<code>Host: example.org</code>
<code></code>
<code>HTTP/1.1 200 OK</code>
<code>Allow: GET, HEAD, OPTIONS, POST</code>
<code>Accept-Post: application/ld+json, text/turtle</code>
<code></code>
<code>POST /inbox/ HTTP/1.1</code>
<code>Host: example.org</code>
<code>Content-Type: text/turtle</code>
<code>Content-Language: en</code>
<code></code>
<code>@prefix as: &lt;https://www.w3.org/ns/activitystreams#&gt; .</code>
<code>@prefix cito: &lt;http://purl.org/spar/cito/&gt; .</code>
<code>&lt;&gt; a as:Announce</code>
<code>  as:object &lt;https://linkedresearch.org/resources#r-903b83&gt; ;</code>
<code>  as:target &lt;http://csarven.ca/dokieli-rww#architecture-and-technologies&gt; .</code>
<code>&lt;https://linkedresearch.org/resources#r-903b83&gt;</code>
<code>  cito:citesAsPotentialReading</code>
<code>  &lt;http://csarven.ca/linked-data-notifications#protocol&gt; .</code></pre>
                    <figcaption property="schema:name">Sender initiated content-negotiation, followed with an announcement of a specific citation relation between two entities (Turtle).</figcaption>
                  </figure>
                </div>
              </section>
            </div>
          </section>


          <section id="test-suite-and-implementation-reports" inlist="" rel="schema:hasPart" resource="#test-suite-and-implementation-reports">
            <h2 property="schema:name">Test Suite and Implementation Reports</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>The W3C <q>Technical Reports</q> are intended to help different (current or future) implementations to have common core functionality and quality, comply with accessibility and internationalisation guidelines, and take security and privacy considerations into account. When an application, for instance, implements a specification, it can be checked against that specification’s conformance criteria for normative requirements. Specifications are typically accompanied with test suites to assist implementations to identify their conformance level as well as areas for improvement. Similarly, reports and feedback help specifications to improve and advance towards publication. So, specifications and conforming implementations are integral to ensuring interoperable applications.</p>

              <p>As a concrete example of the benefits of resource-centric notifications, we took the liberty to both use the W3C process of creating a test suite for LDN, and the submission of reports about implementations to exemplify the LDN protocol itself, as well as to generate discoverable Linked Data about the specification and its implementations. The LDN <cite><a href="https://linkedresearch.org/ldn/tests/" rel="cito:citesAsEvidence">test suite</a></cite> is itself an LDN implementation for the purpose of automating the collection and aggregation of implementation reports which were used directly towards the formal standardisation process.</p>

              <p>The LDN test suite covers each requirement of the specification with individual tests, and the test suite documentation is semantically linked with the specification itself accordingly. Once the tests have been run, the test suite generates a similarly linked implementation report. This report is submitted using LDN itself as the notification mechanism. The listing of implementation reports (software conforming to the specification) is automatically updated and are accessible as their own registered units of information.</p>


              <p id="ldn-test-suites">The LDN test suite puts the LDN protocol into practice by acting as an LDN receiver implementation (based on <cite><a href="https://github.com/csarven/mayktso" rel="cito:citesAsEvidence">mayktso</a></cite>). It also acts as a sender and consumer LDN implementation. Each part of the test suite (for <a href="https://linkedresearch.org/ldn/tests/sender" rel="cito:citesAsEvidence">Senders</a>, <a href="https://linkedresearch.org/ldn/tests/receiver" rel="cito:citesAsEvidence">Receivers</a>, and <a href="https://linkedresearch.org/ldn/tests/consumer" rel="cito:citesAsEvidence">Consumers</a>) advertise an <code>ldp:inbox</code>. Upon completion of a run of the tests, the system generates the report data and sends an LDN notification to the Inbox. The payload of the notification is the full report as RDF.</p>

              <p id="ldn-consumers">As an LDN Consumer, the test suite generates the <a href="https://linkedresearch.org/ldn/tests/summary">summary</a> of the reports by fetching and processing Inbox contents. The notifications are aggregated automatically, and the semantics of the submitted reports are retained.</p>

              <p>The services are decoupled; that is, an implementer may generate their report independently of the test suite, and submit it vial the standard LDN protocol. Furthermore, projects can implement their own consumers and reuse the report data generated by the test suite directly, for example to demonstrate to potential users their conformance to the LDN specification.</p>

              <p>All reports have their own URLs, and a human-readable representation in HTML+RDFa, in addition to JSON-LD or other RDF syntax per <code>OPTIONS</code> and <code>Accept-Post</code> negotiation at this particular test server. See for example <cite><a href="https://dokie.li/" rel="cito:citesAsEvidence">dokieli</a></cite>’s <a href="https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753" rel="cito:citesAsEvidence">implementation report and test results</a> as a sender. This provides the human-visible information, eg. what was tested and the results also in machine-readable form. The report can be seen as a dataset composed of observations based on the structure that was specified in the specification. Hence, each test report is a <code>qb:DataSet</code> (and generally equivalent in <code>as:Object</code>) where its <code>qb:structure</code> refers to <code>https://www.w3.org/TR/ldn/#data-structure-definition</code>. The dataset has <code>as:published</code> and <code>as:actor</code> for the agent that initiated the test and generated the report. The report may be accompanied with an additional <code>as:summary</code>. An example report at <a class="highlight-observation-url" href="https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753">https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753</a> has the following core information:</p>

              <figure class="listing" id="code-ldn-test-report" rel="schema:hasPart" resource="#code-ldn-test-report">
                <pre about="#code-ldn-test-report" lang="" property="schema:description" typeof="fabio:Script" xml:lang=""><code id="code-ldn-test-report-1">&lt;&gt;</code>
<code id="code-ldn-test-report-2">  a qb:DataSet ;</code>
<code id="code-ldn-test-report-3">  qb:structure <a href="https://www.w3.org/TR/ldn/#data-structure-definition">ldn:data-structure-definition</a> .</code>
<code id="code-ldn-test-report-4"></code>
<code id="code-ldn-test-report-5">&lt;<a class="highlight-observation-url" href="https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753#test-sender-header-post-content-type-json-ld">https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753#test-sender-header-post-content-type-json-ld</a>&gt;</code>
<code id="code-ldn-test-report-6">  a qb:Observation, earl:Assertion ;</code>
<code id="code-ldn-test-report-7">  qb:dataSet &lt;&gt; ;</code>
<code id="code-ldn-test-report-8">  <span class="highlight-earl-subject">earl:subject</span> &lt;<a class="highlight-subject-project" href="https://dokie.li">https://dokie.li/</a>&gt; ;</code>
<code id="code-ldn-test-report-9">  <span class="highlight-earl-test">earl:test</span> <a href="https://www.w3.org/TR/ldn/#test-sender-header-post-content-type-json-ld">ldn:test-sender-header-post-content-type-json-ld</a> ;</code>
<code id="code-ldn-test-report-10">  <span class="highlight-earl-mode">earl:mode</span> earl:automatic ;</code>
<code id="code-ldn-test-report-11">  <span class="highlight-earl-result">earl:result</span> [</code>
<code id="code-ldn-test-report-12">    a earl:TestResult ;</code>
<code id="code-ldn-test-report-13">    <span class="highlight-earl-outcome">earl:outcome</span> earl:passed ;</code>
<code id="code-ldn-test-report-14">    <span class="highlight-earl-info">earl:info</span> "&lt;code&gt;Content-Type: application/ld+json; profile=&amp;quot;http://www.w3.org/ns/anno.jsonld&amp;quot;&lt;/code&gt; received."^^rdf:HTML ] .</code></pre>
                <figcaption property="schema:name">A snippet of a test result dataset and an observation in Turtle syntax</figcaption>
              </figure>

              <p>The test results are provided in an HTML table, where each test is expressed as an <code>qb:Observation</code> (and equivalent <code>earl:Assertion</code>) in RDFa containing:</p>

              <ul>
                <li>a <code class="highlight-earl-subject">earl:subject</code> that refers to the URI of the application, eg. <a class="highlight-subject-project" href="https://dokie.li/">dokieli</a>, a <code>doap:Project</code> as an <a href="https://www.w3.org/TR/ldn/#ldn-sender">LDN Sender</a>.</li>
                <li>a <code class="highlight-earl-test">earl:test</code> with the range being one of the requirements (concepts) from the specification.</li>
                <li>a <code class="highlight-earl-mode">earl:mode</code> referring to one of the EARL test modes that were carried out: <a href="https://www.w3.org/TR/EARL10/#automatic">automatic</a>, <a href="https://www.w3.org/TR/EARL10/#manual">manual</a>, <a href="https://www.w3.org/TR/EARL10/#semiAuto">semi-automatic</a>, <a href="https://www.w3.org/TR/EARL10/#undisclosed">undisclosed</a>, <a href="https://www.w3.org/TR/EARL10/#unknownMode">unknown</a>.</li>
                <li>and a <code class="highlight-earl-result">earl:result</code> that gives information on the test <code class="highlight-earl-outcome">earl:outcome</code>: <a href="https://www.w3.org/TR/EARL10-Schema/#passed">passed</a>, <a href="https://www.w3.org/TR/EARL10-Schema/#failed">failed</a>, <a href="https://www.w3.org/TR/EARL10-Schema/#inapplicable">inapplicable</a>, <a href="https://www.w3.org/TR/EARL10-Schema/#cantTell">cannot tell</a>, <a href="https://www.w3.org/TR/EARL10-Schema/#untested">untested</a>, as well as detailed <code class="highlight-earl-info">earl:info</code> about the particular experiment.</li>
              </ul>

              <p>The implementation test report has some basic information linking to the <code>doap:Project</code> with a <code>doap:name</code>, and its <code>doap:maintainer</code>.</p>

              <p>All of the sender, receiver, and consumer reports are available in separate aggregate tables in <cite><a href="https://linkedresearch.org/ldn/tests/summary" rel="cito:citesAsEvidence">LDN Tests Summary</a></cite>. The summary is a <code>void:Dataset</code> where each report is linked as a <code>void:subset</code>. This makes individual reports alternatively findable if the exploration starts from the summary of all test results.</p>

              <p>The test suite software fulfills the base required functionality of the LDN protocol. Next, we take a closer look at the LDN <a href="#linked-data-notifications-implementations">implementations</a>. Later we describe further details on how the LDN <a href="linked-research#linked-specifications-reports">specification and implementation reports</a> are interlinked and retrievable to facilitate their automated discovery and reuse in the Linked Research section.</p>
            </div>
          </section>


          <section id="linked-data-notifications-implementations" inlist="" rel="schema:hasPart" resource="#linked-data-notifications-implementations">
            <h2 property="schema:name">Linked Data Notifications Implementations</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>In order for the LDN specification to advance to W3C Proposed Recommendation status, an <cite><a href="https://www.w3.org/TR/ldn/#exit-criteria">Exit Criteria</a></cite> outlined the requirements for implementations. At least two independent, interoperable implementations of each feature had to be fulfilled. Each feature was implemented by a different set of products. There was no requirement that all features needed to be implemented by a single product.</p>

              <p>In order to verify the conformance and support of the LDN features in implementations, the LDN <cite><a href="https://linkeresearch.org/ldn/tests/">Test Suite</a></cite> was development. Individual <a href="https://linkedresearch.org/ldn/tests/reports/">reports</a> as well as a <a href="https://linkedresearch.org/ldn/tests/summary">summary</a> of all reports were made public using <a href="https://creativecommons.org/licenses/by/4.0/">CC BY</a> license. The <cite><a href="https://linkedresearch.org/ldn/tests/summary">Summary of LDN Implementation Reports</a></cite> is documented and readable by human and machine consumers. The <a href="#ldn-report-receiver">Receiver</a>, <a href="#ldn-report-consumer">Consumer</a>, and <a href="#ldn-report-sender">Sender</a> reports listed below are snapshots of the tests summary data as of 2019-01-05.</p>

              <p>Once an implementation has passed the relevant tests, an implementation report was submitted to help enable the specification progress to W3C Recommendation. Implementations were also submitted after the Recommendation, and remain open to accept new implementation reports. Running the tests generated a checklist, filled in where possible, to indicate the outcome of the tests with additional information, and thus indicating the features implemented according to the specification.</p>

              <dl>
                <dt>Test outcomes</dt>
                <dd>It returns a <a href="https://www.w3.org/TR/EARL10-Schema/#passed" class="earl:passed">passed</a>/<a href="https://www.w3.org/TR/EARL10-Schema/#failed" class="earl:failed">failed</a> response for individual requirements of the LDN spec. It also tests some optional features; you will get an <a href="https://www.w3.org/TR/EARL10-Schema/#inapplicable" class="earl:inapplicable">inapplicable</a> response if you do not implement them, rather than a fail. Some of the test outcomes will require manual checking, hence they will be marked with <a href="https://www.w3.org/TR/EARL10-Schema/#cantTell" class="earl:cantTell">cannot tell</a>. If a test was skipped or no value provided, it will be marked as <a href="https://www.w3.org/TR/EARL10-Schema/#untested" class="earl:untested">untested</a>.</dd>
              </dl>

              <p>So far we have seen decentralised notifications applied in social networking scenarios, as well as for archival activities and scientific experiments through monitoring the state of online resources, datasets and files, or sensor outputs, and sending notifications when changes occur.</p>

              <section id="ldn-report-receiver" rel="schema:hasPart" resource="#ldn-report-receiver">
                <h3 property="schema:name">Receiver reports</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <dl class="document-derived-from">
                    <dt>Derived From</dt>
                    <dd><a href="https://linkedresearch.org/ldn/tests/summary#ldn-report-receiver" rel="prov:wasDerivedFrom">https://linkedresearch.org/ldn/tests/summary#ldn-report-receiver</a></dd>
                  </dl>

                  <dl class="document-derived-on">
                    <dt>Derived On</dt>
                    <dd><time content="2019-01-05T14:27:51.450Z" datatype="xsd:dateTime" datetime="2019-01-05T14:27:51.450Z" property="prov:generatedAtTime">2019-01-05</time></dd>
                  </dl>

                  <p>The receiver implementations are either LDP-based, extension of LDP, generally LD-based platforms, stand-alone libraries, or integrated into existing domain specific systems, eg personal websites. For instance, implementations range from minimum proof of concepts like DIY Inbox to enterprise-ready platforms like Apache Marmotta or Virtuoso Universal Server. <cite><a href="https://rhiaro.github.io/thesis/chapter5#building-pwo">Sloph</a></cite>, <cite>The Presentation of Self on a Decentralised Web</cite>, Guy, 2017, and IndieAnndroid are part of personal publishing and quantified self platforms geared around social media-like interactions. The <cite><a href="https://scta.info/">Scholastic Commentaries and Texts Archive</a></cite> (<abbr title="Scholastic Commentaries and Texts Archive">SCTA</abbr>) inbox is used for annotating scholarly manuscripts, and serving notifications about the annotations. ldn-streams is a specialised receiver that is capable of accepting and serving notifications as RDF streams. distbin is a general purpose "pastebin" to store data. The rest of the implementations are non-domain specific servers that can be used for different purposes.</p>

                  <table id="ldn-test-receiver-summary">
                    <caption>Receiver tests summary</caption>
                    <thead>
                      <tr><th rowspan="3">Implementations</th><th colspan="15">Receiver tests</th></tr><tr colspan="15"><th colspan="8">Required for interop</th><th colspan="7">Optional</th></tr><tr><th><a href="#PR">PR</a></th><th><a href="#PC">PC</a></th><th><a href="#PL">PL</a></th><th><a href="#PLP">PLP</a></th><th><a href="#GR">GR</a></th><th><a href="#GLC">GLC</a></th><th><a href="#GNJL">GNJL</a></th><th><a href="#GNRS">GNRS</a></th><th><a href="#OR">OR</a></th><th><a href="#OAP">OAP</a></th><th><a href="#OAPCJL">OAPCJL</a></th><th><a href="#PRCU">PRCU</a></th><th><a href="#GNL">GNL</a></th><th><a href="#GLCR">GLCR</a></th><th><a href="#GLCB">GLCB</a></th></tr>
                    </thead>
                    <tbody>
                      <tr><td><a href="https://github.com/scta/scta-inbox">SCTA inbox receiver</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/103ee790-fb8c-11e6-8de6-4d841750ffc3">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://rhiaro.co.uk/sloph/">Sloph</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/21b0e360-f91c-11e6-be43-61ca66ced9c9">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/linkeddata/gold">Linked Data server for Go</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/28e765c0-0685-11e7-883c-d126447edde3">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://github.com/jpcik/ldn-streams">ldn-streams</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/4608d2a0-55be-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://carbonldp.base22.io/">Carbon LDP</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/4a7c9590-fddc-11e6-9cdc-c5ba5d2e04f7">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://github.com/solid/node-solid-server">solid-server in Node</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/54fb7eb0-0830-11e7-93be-21b4fcbda752">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://github.com/albertmeronyo/pyldn">pyldn</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/5bb28bc0-068e-11e7-96a3-43fa34486153">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="http://virtuoso.openlinksw.com/#this">Virtuoso Universal Server</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/67e5e110-066d-11e7-9492-f96ede6a2dca">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://github.com/csarven/mayktso">maytkso</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/750bd250-f82b-11e6-a642-0dd857219753">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://rhiaro.co.uk/2017/08/diy-ldn">DIY Inbox</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/8497d150-803a-11e7-8d4e-8fb62127fae5">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://www.trellisldp.org">Trellis LDP</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/9cd86580-bcda-11e8-a3c6-59f9fd1c0455">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://github.com/apache/marmotta">Apache Marmotta</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/b2915fb0-043c-11e7-b2d1-bd6484ea3c05">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/Kongaloosh/IndieAnndroid">IndieAnndroid</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/ba09b850-0829-11e7-9d83-513f9ea34942">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:untested">○</td><td class="earl:untested">○</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="http://sisinflab.poliba.it/swottools/ldp-coap/">LDP-CoAP</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/daa72d30-4ad8-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://distbin.com">distbin.com</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/e714e6b0-064b-11e7-aec7-f50fd0c65679">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td><td class="earl:inapplicable">⌙</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr><tr><td><a href="https://wiki.duraspace.org/display/FF/Fedora+Repository+Home">Fedora Repository</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/eff18f70-f90f-11e6-9c6c-6511243617a2">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:inapplicable">⌙</td></tr>
                    </tbody>
                    <tfoot>
                      <tr>
                        <td colspan="16">
                          <dl>
                            <dt>Number of implementation reports</dt>
                            <dd>16</dd>
                          </dl>

                          <dl>
                            <dt class="earl:passed"><abbr title="Passed">✔</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#passed">Passed</a></dd>
                            <dt class="earl:failed"><abbr title="Failed">✗</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#failed">Failed</a></dd>
                            <dt class="earl:cantTell"><abbr title="Cannot tell">?</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#cantTell">Cannot tell</a></dd>
                            <dt class="earl:inapplicable"><abbr title="Inapplicable">⌙</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#inapplicable">Inapplicable</a></dd>
                            <dt class="earl:untested"><abbr title="Untested">○</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#untested">Untested</a></dd>
                          </dl>
                          <dl class="abbr"><dt id="PR">PR</dt><dd>Accepts <code>POST</code> requests. [<a href="https://www.w3.org/TR/ldn/#test-receiver-post-response">source</a>]</dd><dt id="PC">PC</dt><dd>Responds to <code>POST</code> requests with <code>Content-Type: application/ld+json</code> with status code <code>201 Created</code> or <code>202 Accepted</code>. [<a href="https://www.w3.org/TR/ldn/#test-receiver-post-created">source</a>]</dd><dt id="PL">PL</dt><dd>Returns a <code>Location</code> header in response to successful <code>POST</code> requests. [<a href="https://www.w3.org/TR/ldn/#test-receiver-post-location">source</a>]</dd><dt id="PLP">PLP</dt><dd>Succeeds when the content type includes a <code>profile</code> parameter. [<a href="https://www.w3.org/TR/ldn/#test-receiver-post-link-profile">source</a>]</dd><dt id="GR">GR</dt><dd>Returns JSON-LD on <code>GET</code> requests. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-response">source</a>]</dd><dt id="GLC">GLC</dt><dd>Lists notification URIs with <code>ldp:contains</code>. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-ldp-contains">source</a>]</dd><dt id="GNJL">GNJL</dt><dd>Notifications are available as JSON-LD. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-notifications-json-ld">source</a>]</dd><dt id="GNRS">GNRS</dt><dd>When requested with no <code>Accept</code> header or <code>*/*</code>, notifications are still returned as RDF. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-notifications-rdf-source">source</a>]</dd><dt id="OR">OR</dt><dd>Accepts <code>OPTIONS</code> requests. [<a href="https://www.w3.org/TR/ldn/#test-receiver-options-response">source</a>]</dd><dt id="OAP">OAP</dt><dd>Advertises acceptable content types with <code>Accept-Post</code> in response to <code>OPTIONS</code> request. [<a href="https://www.w3.org/TR/ldn/#test-receiver-options-accept-post">source</a>]</dd><dt id="OAPCJL">OAPCJL</dt><dd><code>Accept-Post</code> includes <code>application/ld+json</code>. [<a href="https://www.w3.org/TR/ldn/#test-receiver-options-accept-post-contains-json-ld">source</a>]</dd><dt id="PRCU">PRCU</dt><dd>Fails to process notifications if implementation-specific constraints are not met. [<a href="https://www.w3.org/TR/ldn/#test-receiver-post-response-contraints-unmet">source</a>]</dd><dt id="GNL">GNL</dt><dd>Restricts list of notification URIs (eg. according to access control). [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-notifications-limited">source</a>]</dd><dt id="GLCR">GLCR</dt><dd>Inbox has type <code>ldp:Container</code>. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-ldp-container">source</a>]</dd><dt id="GLCB">GLCB</dt><dd>Advertises constraints with <code>ldp:constrainedBy</code>. [<a href="https://www.w3.org/TR/ldn/#test-receiver-get-ldp-constrained-by">source</a>]</dd></dl>
                        </td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
              </section>

              <section id="ldn-report-consumer" rel="schema:hasPart" resource="#ldn-report-consumer">
                <h3 property="schema:name">Consumer reports</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <dl class="document-derived-from">
                    <dt>Derived From</dt>
                    <dd><a href="https://linkedresearch.org/ldn/tests/summary#ldn-report-consumer" rel="prov:wasDerivedFrom">https://linkedresearch.org/ldn/tests/summary#ldn-report-consumer</a></dd>
                  </dl>

                  <dl class="document-derived-on">
                    <dt>Derived On</dt>
                    <dd><time content="2019-01-05T14:27:51.450Z" datatype="xsd:dateTime" datetime="2019-01-05T14:27:51.450Z" property="prov:generatedAtTime">2019-01-05</time></dd>
                  </dl>

                  <p>The consumer implementations so far include streaming-capable implementations, stand-alone libraries, and domain specific applications. As part of the <cite><a href="https://iiif.io/">International Image Interoperability Framework</a></cite> (<abbr title="International Image Interoperability Framework">IIIF</abbr>) Discovery Support Technical Specifications Group, an LDN implementation aggregates metadata to discover resources made available by a IIIF service. Later in this thesis, I describe how LDN is implemented in context of dokieli, a clientside authoring and publishing application that can consume notifications to discover independently published annotations on the Web.</p>

                  <table id="ldn-test-consumer-summary">
                    <caption>Consumer tests summary</caption>
                    <thead>
                      <tr><th rowspan="3">Implementations</th><th colspan="10">Consumer tests</th></tr><tr colspan="15"><th colspan="4">Required for interop</th><th colspan="6">Optional</th></tr><tr><th><a href="#HD">HD</a></th><th><a href="#BD">BD</a></th><th><a href="#LJLC">LJLC</a></th><th><a href="#LJLE">LJLE</a></th><th><a href="#NA">NA</a></th><th><a href="#NC">NC</a></th><th><a href="#NC">NC</a></th><th><a href="#NA">NA</a></th><th><a href="#NC">NC</a></th><th><a href="#NR">NR</a></th></tr>
                    </thead>
                    <tbody>
                      <tr><td><a href="https://dokie.li/">dokieli</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/291ce4b0-f88f-11e6-8b4c-bf20c21e7804">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="http://sisinflab.poliba.it/swottools/ldp-coap/">LDP-CoAP</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/2b594460-4ac6-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/jpcik/ldn-streams">ldn-streams</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/5edc5f50-55bd-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/nfreire/LDN4IIIF">Linked Data Notifications for aggregation of IIIF Services</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/93bd9500-05ee-11e7-b31e-53af8173b46a">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/albertmeronyo/boa">boa</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/c2317c50-069b-11e7-96a3-43fa34486153">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/csarven/ldn-tests">LDN Test Suite</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/d43c69a0-0524-11e7-a274-6510a64f2a91">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/trellis-ldp/py-ldnlib">py-ldnlib</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/ec369ca0-fd28-11e6-ac41-93a31f44d58d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr>
                    </tbody>
                    <tfoot>
                      <tr>
                        <td colspan="11">
                          <dl>
                            <dt>Number of implementation reports</dt>
                            <dd>7</dd>
                          </dl>

                          <dl>
                            <dt class="earl:passed"><abbr title="Passed">✔</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#passed">Passed</a></dd>
                            <dt class="earl:failed"><abbr title="Failed">✗</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#failed">Failed</a></dd>
                            <dt class="earl:cantTell"><abbr title="Cannot tell">?</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#cantTell">Cannot tell</a></dd>
                            <dt class="earl:inapplicable"><abbr title="Inapplicable">⌙</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#inapplicable">Inapplicable</a></dd>
                            <dt class="earl:untested"><abbr title="Untested">○</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#untested">Untested</a></dd>
                          </dl>
                          <dl class="abbr"><dt id="HD">HD</dt><dd>Inbox discovery (<code>Link</code> header). [<a href="https://www.w3.org/TR/ldn/#test-consumer-header-discovery">source</a>]</dd><dt id="BD">BD</dt><dd>Inbox discovery (RDF body). [<a href="https://www.w3.org/TR/ldn/#test-consumer-body-discovery">source</a>]</dd><dt id="LJLC">LJLC</dt><dd>Notification discovery from Inbox using JSON-LD compacted form. [<a href="https://www.w3.org/TR/ldn/#test-consumer-listing-json-ld-compacted">source</a>]</dd><dt id="LJLE">LJLE</dt><dd>Notification discovery from Inbox using JSON-LD expanded form. [<a href="https://www.w3.org/TR/ldn/#test-consumer-listing-json-ld-expanded">source</a>]</dd><dt id="NA">NA</dt><dd>Contents of the <samp>announce</samp> notification. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-announce">source</a>]</dd><dt id="NC">NC</dt><dd>Contents of the <samp>changelog</samp> notification. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-changelog">source</a>]</dd><dt id="NC">NC</dt><dd>Contents of the <samp>citation</samp> notification. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-citation">source</a>]</dd><dt id="NA">NA</dt><dd>Contents of the <samp>assessing</samp> notification. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-assessing">source</a>]</dd><dt id="NC">NC</dt><dd>Contents of the <samp>comment</samp> notification. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-comment">source</a>]</dd><dt id="NR">NR</dt><dd>Contents of the <samp>rsvp</samp> notifications. [<a href="https://www.w3.org/TR/ldn/#test-consumer-notification-rsvp">source</a>]</dd></dl>
                        </td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
              </section>

              <section id="ldn-report-sender" rel="schema:hasPart" resource="#ldn-report-sender">
                <h3 property="schema:name">Sender reports</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <dl class="document-derived-from">
                    <dt>Derived From</dt>
                    <dd><a href="https://linkedresearch.org/ldn/tests/summary#ldn-report-sender" rel="prov:wasDerivedFrom">https://linkedresearch.org/ldn/tests/summary#ldn-report-sender</a></dd>
                  </dl>

                  <dl class="document-derived-on">
                    <dt>Derived On</dt>
                    <dd><time content="2019-01-05T14:27:51.450Z" datatype="xsd:dateTime" datetime="2019-01-05T14:27:51.450Z" property="prov:generatedAtTime">2019-01-05</time></dd>
                  </dl>

                  <p>Some of the sender implementations include streaming-capable implementations of LDN, stand-alone libraries, and domain specific applications. Some of the sender implementations also fulfill the role of a consumer. For instance, Linked Edit Rules checks the consistency of statistical datasets against structured constraints, and delivers the consistency report as a notification to the user. py-ldnlib is a library that can be reused by other applications to send LDN notifications.</p>

                  <table id="ldn-test-sender-summary">
                    <caption>Sender tests summary</caption>
                    <thead>
                      <tr><th rowspan="3">Implementations</th><th colspan="8">Sender tests</th></tr><tr colspan="15"><th colspan="8">Required for interop</th></tr><tr><th><a href="#HD">HD</a></th><th><a href="#HPR">HPR</a></th><th><a href="#HPCTJL">HPCTJL</a></th><th><a href="#HPVJL">HPVJL</a></th><th><a href="#BD">BD</a></th><th><a href="#BPR">BPR</a></th><th><a href="#BPCTJL">BPCTJL</a></th><th><a href="#BPVJL">BPVJL</a></th></tr>
                    </thead>
                    <tbody>
                      <tr><td><a href="https://dokie.li/">dokieli</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/2c5af2f0-f832-11e6-a642-0dd857219753">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/jeffreycwitt/ldn-scta-sender">ldn-scta-sender</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/87647460-05b0-11e7-bd05-bf9fab02ee3c">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="http://sisinflab.poliba.it/swottools/ldp-coap/">LDP-CoAP</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/acd6a3d0-4ac5-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/trellis-ldp/py-ldnlib">py-ldnlib</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/af76b2b0-fbab-11e6-8de6-4d841750ffc3">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/albertmeronyo/linked-edit-rules">Linked Edit Rules</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/c4ec4810-0602-11e7-b31e-53af8173b46a">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/csarven/mayktso">mayktso</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/cee7ef90-fe0f-11e6-9cdc-c5ba5d2e04f7">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="https://github.com/jpcik/ldn-streams">ldn-streams</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/ed5d3ce0-55bd-11e7-a741-cb560322e93d">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr><tr><td><a href="http://distbin.com/">distbin.com</a> (<a rel="void:subset" href="https://linkedresearch.org/ldn/tests/reports/ee1b0850-f82b-11e6-a642-0dd857219753">report</a>)</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td><td class="earl:passed">✔</td></tr>
                    </tbody>
                    <tfoot>
                      <tr>
                        <td colspan="9">
                          <dl>
                            <dt>Number of implementation reports</dt>
                            <dd>8</dd>
                          </dl>

                          <dl>
                            <dt class="earl:passed"><abbr title="Passed">✔</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#passed">Passed</a></dd>
                            <dt class="earl:failed"><abbr title="Failed">✗</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#failed">Failed</a></dd>
                            <dt class="earl:cantTell"><abbr title="Cannot tell">?</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#cantTell">Cannot tell</a></dd>
                            <dt class="earl:inapplicable"><abbr title="Inapplicable">⌙</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#inapplicable">Inapplicable</a></dd>
                            <dt class="earl:untested"><abbr title="Untested">○</abbr></dt><dd><a href="https://www.w3.org/TR/EARL10-Schema/#untested">Untested</a></dd>
                          </dl>
                          <dl class="abbr"><dt id="HD">HD</dt><dd>Inbox discovery (<code>Link</code> header). [<a href="https://www.w3.org/TR/ldn/#test-sender-header-discovery">source</a>]</dd><dt id="HPR">HPR</dt><dd>Makes <code>POST</code> requests (<code>Link</code> header). [<a href="https://www.w3.org/TR/ldn/#test-sender-header-post-request">source</a>]</dd><dt id="HPCTJL">HPCTJL</dt><dd><code>POST</code> includes <code>Content-Type: application/ld+json</code> (<code>Link</code> header). [<a href="https://www.w3.org/TR/ldn/#test-sender-header-post-content-type-json-ld">source</a>]</dd><dt id="HPVJL">HPVJL</dt><dd><code>POST</code> payload is JSON-LD (<code>Link</code> header). [<a href="https://www.w3.org/TR/ldn/#test-sender-header-post-valid-json-ld">source</a>]</dd><dt id="BD">BD</dt><dd>Inbox discovery (RDF body). [<a href="https://www.w3.org/TR/ldn/#test-sender-body-discovery">source</a>]</dd><dt id="BPR">BPR</dt><dd>Makes <code>POST</code> requests (RDF body). [<a href="https://www.w3.org/TR/ldn/#test-sender-body-post-request">source</a>]</dd><dt id="BPCTJL">BPCTJL</dt><dd><code>POST</code> includes <code>Content-Type: application/ld+json</code> (RDF body). [<a href="https://www.w3.org/TR/ldn/#test-sender-body-post-content-type-json-ld">source</a>]</dd><dt id="BPVJL">BPVJL</dt><dd><code>POST</code> payload is JSON-LD (RDF body). [<a href="https://www.w3.org/TR/ldn/#test-sender-body-post-valid-json-ld">source</a>]</dd></dl>
                        </td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
              </section>
            </div>
          </section>

          <section id="ldn-forces-functions" inlist="" rel="schema:hasPart" resource="ldn-forces-functions">
            <h2 property="schema:name">Forces and Functions in Linked Data Notifications</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>This section goes into detail about how LDN fulfills or supports some of the forces and functions in scientific communication. LDN can facilitate the realisation of interconnecting scholarly communication systems as posited in <cite>Rethinking Scholarly Communication</cite>.</p>

              <p id="ldn-forces">Assuming multiple interoperating implementations of LDN, we observe the <em>forces</em>:</p>

              <dl>
                <dt>Actor</dt>
                <dd>The actors involved in executing the LDN protocol can be categorised into documents (or things, or entities) and software applications. An LDN target (like a document or a researcher profile) with an inbox is the actor that affords the start of any communication. Applications consist of LDN implementations with one or more roles: sender, receiver, and consumer, with the purpose of delivering information to or about a target that can be used by interested parties.</dd>

                <dt>Content</dt>
                <dd>Target resources, inboxes, and notifications collectively comprise the content in LDN's flow. That is, any target resource advertising an inbox relation; an inbox description with a collection of notifications (with optional data about creating and using notifications), and individual notifications with any RDF contents. A notification's content can include or refer to any unit of information or communication in the scientific and scholarly system.</dd>

                <dt>Accessibility</dt>
                <dd>An inbox and its notifications are made <em>available</em> to users and applications via HTTP over a network connection. When an HTTP URL resolves, its contents are <em>retrievable</em>, subject to authentication and authorisation. Content can be created by and made available to different kinds of consumers: humans or machines.</dd>

                <dt>Applicability</dt>
                <dd>Applicability of scholarly communication comes from research which responds to problems or answers questions, which can be used or built upon by others. Notifications enable communication between different parties (individuals, universities, research institutions, industry, etc.) and LDN enables more direct, non-centralised control over this communication.</dd>
              </dl>

              <p id="ldn-functions">The <em>functions</em>:</p>

              <dl>
                <dt>Registration</dt>
                <dd>Prior to LDN, notifications generally would not be considered as persistent units of information. Notifications being registered as their own entities as HTTP URIs facilitates information discovery and reuse.</dd>

                <dt>Awareness</dt>
                <dd>The LDN protocol provides a way for content to be disseminated, as well as read by different consumers. LDN can be used to inform systems that a registration of a unit of information took place; a request for quality-control and verification is sought-after, or has occurred; and for instance, an archiving service is informed to place a request for preserving the units.</dd>

                <dt>Certification</dt>
                <dd>LDN can be implemented to support scholarly certification mechanisms. Notifications can be sent to request review, as well to return the results of a certification process such as a registered unit of information's significance and soundness. Units of information at any level of granularity can be referenced in notifications, from entire articles to individual data points. Similarly, information about a revocation of a unit of information can be circulated.</dd>

                <dt>Archiving</dt>
                <dd>LDN can be implemented to support archival processes. When new units of information are registered, or existing units of information are updated, archives can be notified in order to store a persistent copy of the resources.</dd>
              </dl>

              <p>Primarily, LDN fulfill the awareness function. Registration of scholarly artefacts are not addressed by LDN, however, notifications which reference scholarly artefacts are registered. With respect to the certification and archiving functions, LDN can be employed to bridge systems that are dedicated to carrying out those functions. For certification, LDN helps to distribute the acknowledgement of validity and quality-control of registered units of information across scholarly systems. Similarly, LDN can inform archiving systems about the existence and state of units of information to can be preserved. Lastly, LDN can be used to communicate information pertaining to rewards, incentives and feedback, and metrics could be directly derived from the notification system itself.</p>

              <p>The information herein is factored into table <cite><a href="decentralising-scholarly-communication#specifications-for-forces-and-functions">Specifications for Forces and Functions</a></cite>.</p>
            </div>
          </section>

          <section id="contextualising-ldn" inlist="" rel="schema:hasPart" resource="#on-screen">
            <h2 property="schema:name">Contextualising LDN</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>In this section we discussed how notifications may be purposed in a number of ways in a decentralised scholarly communication ecosystem. We outlined specific use cases, and used these to derive design considerations. An overview of existing protocols for decentralised notifications indicates their respective strengths and shortcomings, and a new protocol is designed to meet our needs in light of this. The Linked Data Notifications protocol separates the concepts of <em>senders</em>, <em>receivers</em> and <em>consumers</em> of notifications for modularity, and leverages Linked Data concepts of shared vocabularies and URIs, thus providing a building block for notifications between diverse decentralised Web applications. The three roles can be implemented independently from each other or all together in one system. This permits end users more freedom to switch between the online tools they use, as well as generating greater value when notifications from different sources can be shared between applications and used in combination.</p>

              <p>The utility and flexibility of LDN is demonstrated to some extent by the various implementations reported as part of the standardisation process. In this final concluding section, I evaluate LDN by comparing it along various axes with the potential alternatives. I also explain its relationship with other Web standards in the Linked Data or decentralisation space, and describe how LDN addresses users' degree of control over their data and applications. Finally, I discuss additional considerations that were omitted from LDN at the time of standardisation but may be important to take into account for certain implementations.</p>

              <section id="comparison-of-notification-mechanisms" inlist="" rel="schema:hasPart" resource="#comparison-of-notification-mechanisms">
                <h3 property="schema:name">Comparison of Notification Mechanisms</h3>
                <div datatype="rdf:HTML" property="schema:description">

                  <p>This section covers a direct comparison between existing notification mechanisms from the <a href="#overview-of-web-notification-systems">earlier overview</a> with Linked Data Notifications, followed by a discussion of the trade-offs that were necessary to realize certain benefits of LDN. The comparison criteria include our <a href="linked-data-notifications#requirements-and-design-considerations">requirements and design considerations</a> (<em>Rx</em>) along with additional technical information which helps to capture some design differences (<em>Tx</em>).</p>

                  <p>The figure <cite><a href="#table-comparison-of-notification-mechanisms">Comparison of notification mechanisms</a></cite> is derived from <a href="http://csarven.ca/linked-data-notifications#comparison-of-notification-mechanisms">http://csarven.ca/linked-data-notifications#comparison-of-notification-mechanisms</a> and modified to include <cite>WebSub</cite>.</p>

                  <figure>
                    <table id="table-comparison-of-notification-mechanisms">
                      <caption>Comparison of notification mechanisms</caption>
                      <thead>
                        <tr>
                          <th>Mechanism</th>
                          <th>T1</th>
                          <th>T2</th>
                          <th>T3</th>
                          <th>R1</th>
                          <th>R2</th>
                          <th>R3</th>
                          <th>R4-A</th>
                          <th>R4-B</th>
                          <th>R4-C<sup>p</sup></th>
                          <th>R4-C<sup>v</sup></th>
                          <th>R4-C<sup>o</sup></th>
                          <th>R5</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <th>Semantic Pingback</th>
                          <td>Linkback</td>
                          <td>POST</td>
                          <td>RDF</td>
                          <td>S R</td>
                          <td>/</td>
                          <td>/</td>
                          <td>Any<sup>r</sup></td>
                          <td>form urlencoded<sup>k</sup></td>
                          <td>!</td>
                          <td>! parse source</td>
                          <td>Any<sup>r</sup></td>
                          <td>X</td>
                        </tr>
                        <tr>
                          <th>Webmention</th>
                          <td>Linkback</td>
                          <td>POST</td>
                          <td>HTML</td>
                          <td>S R</td>
                          <td>–</td>
                          <td>–</td>
                          <td>Any<sup>h</sup></td>
                          <td>form urlencoded<sup>k</sup></td>
                          <td>!</td>
                          <td>! parse source</td>
                          <td>Any<sup>h</sup></td>
                          <td>X</td>
                        </tr>
                        <tr>
                          <th>Provenance Pingback</th>
                          <td>Linkback</td>
                          <td>POST</td>
                          <td>RDF</td>
                          <td>S R</td>
                          <td>/</td>
                          <td>/</td>
                          <td>/</td>
                          <td>URI list</td>
                          <td>/</td>
                          <td>/</td>
                          <td>RDF<sup>q</sup></td>
                          <td>X</td>
                        </tr>
                        <tr>
                          <th>WebSub</th>
                          <td>Fat ping</td>
                          <td>POST</td>
                          <td>Varies</td>
                          <td>S R U</td>
                          <td>-</td>
                          <td>-</td>
                          <td>Any</td>
                          <td>form urlencoded</td>
                          <td>/</td>
                          <td>+ app</td>
                          <td>-</td>
                          <td>!</td>
                        </tr>
                        <tr>
                          <th>DSNotify</th>
                          <td>Fat ping</td>
                          <td>POST, PUT</td>
                          <td>XML, PuSH</td>
                          <td>S U</td>
                          <td>/</td>
                          <td>–</td>
                          <td>–</td>
                          <td>XML</td>
                          <td>/</td>
                          <td>–</td>
                          <td>RDF<sup>t</sup></td>
                          <td>!</td>
                        </tr>
                        <tr>
                          <th>sparqlPuSH</th>
                          <td>Fat ping</td>
                          <td>POST</td>
                          <td>XML, SPARQL, PuSH</td>
                          <td>S U</td>
                          <td>–</td>
                          <td>–</td>
                          <td>–</td>
                          <td>XML<sup>ra</sup></td>
                          <td>/</td>
                          <td>–</td>
                          <td>RDF<sup>t</sup></td>
                          <td>!</td>
                        </tr>
                        <tr>
                          <th>ResourceSync</th>
                          <td>Fat ping</td>
                          <td>POST</td>
                          <td>XML, PuSH</td>
                          <td>S U</td>
                          <td>/</td>
                          <td>–</td>
                          <td>–</td>
                          <td>XML<sup>s</sup></td>
                          <td>/</td>
                          <td>–</td>
                          <td>?</td>
                          <td>!</td>
                        </tr>
                        <tr>
                          <th>Linked Data Notifications</th>
                          <td>Fat ping</td>
                          <td>POST</td>
                          <td>JSON-LD</td>
                          <td>S R C</td>
                          <td>!</td>
                          <td>! URI</td>
                          <td>Any</td>
                          <td>JSON-LD<sup>j</sup></td>
                          <td>+ app</td>
                          <td>+ app</td>
                          <td>–</td>
                          <td>O app</td>
                        </tr>
                      </tbody>
                      <tfoot>
                        <tr>
                          <td colspan="14">
                            <dl class="abbr">
                              <dt>T1</dt><dd>Notification type</dd>
                              <dt>T2</dt><dd>Delivery method</dd>
                              <dt>T3</dt><dd>Dependencies</dd>
                              <dt>R1</dt><dd>Modularity (application classes: S Sender, R Receiver, C Consumer, U Subscriber)</dd>
                              <dt>R2</dt><dd>Reusability</dd>
                              <dt>R3</dt><dd>Persistence - required? how?</dd>
                              <dt>R4-A</dt><dd>Target representation</dd>
                              <dt>R4-B</dt><dd>Notification body</dd>
                              <dt>R4-C<sup>p</sup></dt><dd>Payload processing required?</dd>
                              <dt>R4-C<sup>v</sup></dt><dd>Verification - required? how?</dd>
                              <dt>R4-C<sup>o</sup></dt><dd>Requirements for referenced resources?</dd>
                              <dt>R5</dt><dd>Subscription</dd>
                            </dl>
                            <hr/>
                            <dl class="abbr">
                              <dt>–</dt><dd>not applicable, out of scope</dd>
                              <dt>/</dt><dd>not specified, in scope</dd>
                              <dt>X</dt><dd>explicitly disallowed</dd>
                              <dt>app</dt><dd>application specific decision</dd>
                              <dt>!</dt><dd>required (<em>MUST</em>)</dd>
                              <dt>+</dt><dd>recommended (<em>SHOULD</em>)</dd>
                              <dt>O</dt><dd>optional (<em>MAY</em>)</dd>
                              <dt>PuSH</dt><dd>PubSubHubbub</dd>
                            </dl>
                            <hr/>
                            <dl class="abbr">
                              <dt><sup>h</sup></dt><dd>HTML recommended</dd>
                              <dt><sup>j</sup></dt><dd>Alternate RDF formats can be negotiated</dd>
                              <dt><sup>k</sup></dt><dd><code>source</code> and <code>target</code> key–value pairs is required</dd>
                              <dt><sup>q</sup></dt><dd>Provenance records with <a href="http://www.w3.org/TR/prov-o/">PROV Ontology</a></dd>
                              <dt><sup>r</sup></dt><dd>RDF representation recommended</dd>
                              <dt><sup>ra</sup></dt><dd>SPARQL results transformed to RSS/Atom</dd>
                              <dt><sup>s</sup></dt><dd><a href="https://www.sitemaps.org/protocol.html">Sitemaps</a></dd>
                              <dt><sup>t</sup></dt><dd>Described in an RDF store or dataset</dd>
                            </dl>
                          </td>
                        </tr>
                      </tfoot>
                    </table>

                    <figcaption>Table is derived from <cite><a href="http://csarven.ca/linked-data-notifications#comparison-of-notification-mechanisms" rel="prov:wasDerivedFrom">comparison of notification mechanisms</a></cite> originally published in <cite>Linked Data Notifications: a resource-centric communication protocol</cite>, 2016, <a href="https://creativecommons.org/licenses/by/4.0/">CC BY</a>.</figcaption>
                  </figure>

                  <p>All of the notification mechanisms specify multiple roles, with the Sender (S) being common across all of them. LDN is the only mechanism which describes the Consumer (C) role; this explicitly highlights how notifications can be useful to applications other than those concerned with sending and receiving. For mechanisms which include a Subscriber (U) role, the Receiver (R) is essentially also the Consumer, so Receivers are less generic and require specialised payloads. In this respect, LDN is a more modular specification. LDN Receivers need not be concerned with additional actions beyond storing and exposing notifications; complex and domain-specific uses of the notifications are left to Consumers, resulting in a lot more flexibility in terms of lightweight end-user applications.</p>

                  <p>WebSub differs in terms of the number of roles, but not the actual functions of the specified roles. The "hub" is an intermediate party which plays the role of a Receiver and a Sender, relaying notifications from the original Sender (or publisher) to the Subscriber (or ultimate Receiver), but nonetheless only makes notifications available to the Subscriber and no other applications.</p>

                  <p>LDN is the only mechanism that enforces that notifications should be reusable, and specifies how Receivers should make notifications available for Consumers. The other mechanisms either consider notification reuse as inapplicable or leave it optional and unspecified.</p>

                  <p>This is also tied to to persistence and retrievability in that LDN requires notifications to be identified by dereferenceable HTTP URIs. The other notification mechanisms treat notifications as ephemeral resources which only exist until they are delivered to a Receiver.</p>

                  <p>The mechanisms with the 'fat ping' approach require structured data in XML or JSON-LD. Only LDN requires the use of RDF through JSON-LD, and optional content negotiation for other RDF syntaxes. Thus, notification payloads can include references to other retrievable resources, or can embed all relevant data directly in the payload.</p>

                  <p>Approaches which send only URLs (as with linkback) rely on the receiver interpreting a third-party resource, which may or may not contain structured content or be under the control of the sender. Approaches which offer additional guidance to aid the receiver in interpreting the source document(s) nonetheless still restrict the sender. LDN therefore offers flexibility to senders, increasing the potential uses for the notification mechanism. LDN compensates for increased complexity on the receiver’s end by recommending filtering mechanisms, and moving most of the burden of understanding notification contents to the consumer role. In placing no constraints on the notification payload, LDN enables a sender to be precise and lossless with the data it is transmitting. As such LDN can cover a broader variety of use cases.</p>

                  <p>LDN recommends that Receiver applications perform some processing of the payload. This is to enable users to configure their Receivers to filter out spam or customise them for particular domains, but is not required; such filtering could also be left to or supplemented by Consumers. In contrast, Semantic Pingback and Webmention require receivers to parse the form-encoded payload and then to perform fetching of the URLs within and additional parsing of the documents those URLs identify. This is required in order to verify the message (by finding the target URL). Such processing in LDN is left at the discretion of the Receiver; linkback style verification is not required, but also not forbidden. </p>

                  <p>As WebSub requires subscribing as part of its core design, hubs are expected to perform specific actions on receipt of a <em>subscription</em> request (where the payload is tightly constrained), but not necessarily to process the contents of a notification sent by a <em>publisher</em> (where the payload can be anything; how they handle this depends on the content-type). </p>
                  
                  <p>Though LDN does not specify a subscription mechanism in the same vein as WebSub, thanks to the modularity of specification conformance classes and the flexible nature of the notification contents, it is possible for applications to perform subscription-like interaction by taking on multiple roles.</p>

                  <p>LDN requires that Senders and Consumers are equipped to discover Inboxes (receiving endpoints) through both HTTP headers and the body of an RDF resource. This slightly increased complexity around Inbox discovery for Senders and Consumers is a worthwhile tradeoff to lower the bar for publishers of target resources; Inboxes can be advertised from <em>any</em> document on the Web (through HTTP headers), and attached to even non-informational resources (through RDF statements). This increases the potential use cases for LDN.</p>

                  <p>It is difficult to objectively measure performance metrics of the different mechanisms, as the various implementations use different servers and programming languages, whose efficiency don't necessarily have any bearing on the protocols themselves. Mechanisms which require large payloads may increase the time for HTTP requests to be processed, and mechanisms that require verification add an additional network request to complete the process.</p>
                </div>
              </section>

              <section id="interoperability-across-specifications" inlist="" rel="schema:hasPart" resource="interoperability-across-specifications">
                <h3 property="schema:name">Interoperability Across Specifications</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>There are several technical specifications that LDN may be interoperably combined. Here we discuss a few.</p>

                  <p id="relationship-with-ldp"><strong>Relationship with Linked Data Platform</strong>: An LDN Receiver is not dependent on a complete implementation of the <abbr title="Linked Data Platform">LDP</abbr> specification, but comprises an easy-to-implement subset. An LDN Inbox is comparable to an LDP <cite><a href="https://www.w3.org/TR/ldp/#dfn-linked-data-platform-basic-container">BasicContainer</a></cite>. Thus, the core features necessary to exchange notifications between LDN applications is effectively possible with existing, as well as future implementations of LDP.</p>

                  <p id="relationship-with-activitypub"><strong>Relationship with ActivityPub</strong>: ActivityPub uses LDN's <a href="https://www.w3.org/TR/activitypub/#inbox">targeting</a> and <a href="https://www.w3.org/TR/activitypub/#delivery">delivery</a> mechanism with <a href="https://www.w3.org/TR/activitypub/#h-note-9">some specific constraints</a>. Notifications must use a single AS2 Activity in compact JSON-LD syntax. Receivers are required to authenticate requests made by Senders, as well as verify the existence of an object (that the activity is about) that is mentioned in the notification by fetching its source from the origin server. It is possible for LDN Senders to deliver notifications to AP servers. It is also possible for AP clients to deliver messages to LDN Receivers with some bridging.</p>

                  <p id="relationship-with-fedora"><strong>Relationship with Fedora API</strong>: The <a href="http://fcrepo.github.io/fcrepo-specification/">Fedora API Specification</a> is in the process of being formalised (as an extension of LDP) by the Fedora community. As LDN can be used to support external integrations, Fedora API's repository event stream <a href="https://fcrepo.github.io/fcrepo-specification/#notifications">draws upon the LDN specification</a>, allowing LDN consumers and senders to react asynchronously to repository events. Fedora implementations were included in the LDN implementation reports.</p>

                  <p id="linked-data-vocabularies"><strong>Linked Data vocabularies</strong>: As LDN is agnostic about the contents of a notification, any Linked Data vocabulary can be used, including the <a href="structure-of-scholarly-information#vocabularies">vocabularies</a> we have previously discussed in <cite>Structure of Scholarly Information</cite>.</p>

                  <p id="federation-protocols"><strong>Relationship with other federation protocols</strong>: Further similarities and differences between LDN and other federation protocols and social APIs are described in W3C Note <cite><a href="https://www.w3.org/TR/social-web-protocols/">Social Web Protocols</a></cite>. For example, a bridging code can be applied by applications implementing different specifications to achieve further interoperability between systems.</p>
                </div>
              </section>

              <section id="degree-of-control-in-ldn" inlist="" rel="schema:hasPart" resource="#degree-of-control-in-ldn">
                <h3 property="schema:name">Degree of Control in LDN</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>At the beginning of this section, four requirements relating to user control over data were listed. LDN addresses each of these as follows:</p>
                  
                  <dl>
                    <dt>Actors can use their preferred applications to discover, reuse, and send notifications</dt>
                    <dd>LDN was developed as a W3C standard, with strict criteria for interoperability. Applications which implement any of the roles of the protocol can confirm their conformance with the test suite, and are thus expected to be able to interoperate with other conformant applications. Actors should be able to choose any available conformant application and maintain expected notification-related functionality.</dd>

                    <dt>Users store incoming notifications where they prefer</dt>
                    <dd>Any conforming LDN Receiver (server) under a particular user's control - which they trust, and are authorised to read - can be chosen to store notifications.</dd>

                    <dt>Users can switch between applications without having to move their data</dt>
                    <dd>LDN specifies the mechanism for information exchange, so it is possible to switch between Receiver applications at the protocol level without any further action (implementation-specific details like database storage mechanism may require additional work for portability of data already stored there; this is out of scope of the LDN specification). A user's Receiver, where notification data is stored, has no bearing on their ability to alternate between sending and consuming applications as needed.</dd>

                    <dt>Users change the location of their data without having to change their application</dt>
                    <dd>Users can serve their inbox and the notifications from different HTTP URIs provided that they do not mind persistence. In this case, the target resource's inbox location would simply point to the new location. As inbox discovery starts from looking up a target resource's description, the new inbox location will be discovered as before.</dd>
                  </dl>
                </div>
              </section>

              <section id="additional-considerations" inlist="" rel="schema:hasPart" resource="#additional-considerations">
                <h3 property="schema:name">Additional Considerations</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>The LDN specification itself covers privacy and security considerations on <a href="#authenticated-inboxes">authenticated inboxes</a> and <a href="#personally-identifiable-information">personally identifiable information</a>. As for <a href="#persistence-and-retrievability">persistence and retrievability</a>, any consumer application can potentially benefit from being able to reuse notifications if the owners of a receiver makes the necessary commitments. There are further considerations which may be of interest to implementers, or may constitute future work around extending the core protocol, which are worth outlining here.</p>

                  <p id="subscribing-to-notifications"><strong>Subscribing to Notifications</strong>: The interaction between consumers and receivers describes a <em>pull</em> mechanism. A <a href="#subscribing">subscribing</a> mechanism in which consumers <em>request</em> that receivers <em>push</em> content changes to them is left out of scope. Much of the related work <em>requires</em> notifications to be explicitly solicited to trigger sending. Since in a decentralised model, receivers may not be aware of possible sources for notifications, our sender-receiver relationship depends on the sender’s autonomy to make such decisions by itself. This does not preclude the scenario in which a receiver may wish to solicit notifications from a particular sender, but as there are already <em>subscription</em> mechanisms in wide use on the Web eg. ActivityPub, WebSub, <cite><a href="https://tools.ietf.org/html/rfc6455">The WebSocket Protocol</a></cite>, <cite><a href="https://tools.ietf.org/html/rfc8030">Generic Event Delivery Using HTTP Push</a></cite>, and can be interopearbly combined with LDN, we do not need to specify it as part of our protocol. A push based interaction can still be arranged between LDN applications, where it would be implementation specific. For example, in a notification, a sender specifies the location of an inbox where it can receive updates about content changes. Then, an application that consumes the notifications manages its own subscriber list, and takes the role of sender in order to push content to the inbox as specified in the notification.</p>
  
                  <p id="semantic-organisation-of-notifications"><strong>Semantic Organisation of Notifications</strong>: While LDN facilitates a decentralised architecture for notification exchange, it does not prescribe the structure and semantics of the notifications themselves. The composition of the notifications are unspecified to foster different kinds of applications to be built to communicate information in any domain. Consequently, organisation of notification models materialises through the fact that domain-centric applications create and consume what is meaningful to them in order to coordinate among themselves. So while the notification system is globally decentralised, it enables communication that can be specialised and be only useful and meaningful to applications that understands a particular message's semantics.</p>

                  <p id="inbox-paging"><strong>Inbox Paging</strong>: We need to consider both the needs of software systems and humans when large amounts of notification data are being generated and shared between diverse applications which may be operating without knowledge of each other. To organise and manage large amount of notifications over time, mechanisms should be in place to break representations of collections of notifications into multiple paged responses that may be easier to consume by applications.</p>

                  <p id="updating-and-deleting-notifications"><strong>Updating and Deleting Notifications</strong>: Receivers may want to carry out resource management or garbage collection, or permit consumers or other applications to do so. For example, an application to consume messages might let an authenticated and authorised user ‘mark as read’ by adding a triple to the inbox or notification contents.</p>
                </div>
              </section>

              <p>As we have seen in <cite>Scholarly Communication on the Web</cite>, research communication is continuously transitioning from print-centric to Web-centric. LDN being rooted to Web-centric protocols and formats builds on a reliable and relevant foundation for it to be used as part of the future scholarly communications ecosystem.</p>

              <p>There are many diverse use cases for notifications within scholarly communication now and likely to be more in the future, so designing the protocol to be flexible permits a common thread of data sharing between these different cases, as well as accommodating unexpected use. Specialisation may be necessary for notifications to be particularly useful in a lot of scenarios, however the protocol is not the level to do this. Thus, LDN leaves it up to applications to specialise their functionality for particular domains or user needs.</p>

              <p>In the next section, I present LDN as one part of the broader scholarly communication ecosystem through an implementation which ties together many relevant protocols, and encompasses article authoring, annotations, and social interactions.</p>
            </div>
          </section>
        </div>
      </article>
    </main>
  </body>
</html>
